Object subclass: #TSDemoMorph	uses: TTyped	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Demo-Structural'!!TSDemoMorph commentStamp: 'OzC 8/24/2012 17:31' prior: 0!Please see first the class TSDemoAbecedarium.This class simulates to be the top of a morph classes hierarchy, where TSDemoAbecedarium has any relation with this hierarchy. Its direct subclass is TSDemoPoint.Please continue with: TSDemoPoint!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TSDemoMorph class	uses: TTyped classTrait	instanceVariableNames: ''!Object subclass: #TSDemoAbecedarium	uses: TTyped	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Demo-Structural'!!TSDemoAbecedarium commentStamp: 'OzC 8/24/2012 18:54' prior: 0!This class simulates to understand all selector from a to z, but for the demo, we just include 3 of them. They are #a, #x, and #y. Each of this method returns their corresponding position of the selector in the abecedarium.Please continue with: TSDemoMorph!!TSDemoAbecedarium methodsFor: 'accessing' stamp: 'OzC 8/24/2012 12:31'!(Integer) a	^ 1 ! !!TSDemoAbecedarium methodsFor: 'accessing' stamp: 'OzC 8/24/2012 12:31'!(Integer) x	^ 25 ! !!TSDemoAbecedarium methodsFor: 'accessing' stamp: 'OzC 8/24/2012 12:31'!(Integer) y	^ 26 ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TSDemoAbecedarium class	uses: TTyped classTrait	instanceVariableNames: ''!TSDemoMorph subclass: #TSDemoPoint	instanceVariableNames: '(Integer)x (Integer)y'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Demo-Structural'!!TSDemoPoint commentStamp: 'OzC 8/24/2012 17:43' prior: 0!Please see first the class TSDemoAbecedarium.This class simulates to be a point with and x and y values (represented as integers). This includes several methods to move this point in the plane.  The interesting methods are in protocol 'nominal-structural'.Please continue with: TSDemoPoint3D!!TSDemoPoint methodsFor: 'accessing' stamp: 'OzC 8/24/2012 12:31'!(Integer) x	^ x ! !!TSDemoPoint methodsFor: 'accessing' stamp: 'OzC 8/24/2012 12:31'!(Integer) y	^ y ! !!TSDemoPoint methodsFor: 'nominal-structural' stamp: 'OzC 8/24/2012 17:47'!moveMix: (TSDemoMorph{x (-> Integer) . y (->Integer)}) another"Its argument type is a mix between a nominal (TSDemoMorph) and structural {x (-> Integer) . y (->Integer)} type. Because of this, this methods requires an object that its class is subclass of TSDemoMorph and has at least methods #x and #y. This will solve the problems in the method TSDemoStructuralUsage>>unexpectedIssueTestingMoveWith: "	x := another x.	y := another y.   ! !!TSDemoPoint methodsFor: 'nominal-structural' stamp: 'OzC 8/24/2012 17:48'!moveNominal: (TSDemoPoint) another	"The argument type is a nominal type"	x := another x.	y := another y.   ! !!TSDemoPoint methodsFor: 'nominal-structural' stamp: 'OzC 8/24/2012 17:49'!moveStructural: ({x (-> Integer) . y (->Integer)}) another	"The argument type is a structural type. For now this seems to work as same as the nominal one, but it has an issue.	Please see TSDemoStructuralUsage>>unexpectedIssueTestingMoveWith:"	x := another x.	y := another y.   ! !!TSDemoPoint methodsFor: 'nominal-structural' stamp: 'OzC 8/24/2012 17:50'!wrongMoveStructural: ({x (-> Integer) . z (->Integer)}) another	"The argument type is wrong, because #y selector is missing. Note: #z selector does not influence"	<typecheck: false>	x := another x.	y := another y.   ! !!TSDemoPoint methodsFor: 'initialize-release' stamp: 'OzC 8/24/2012 17:39'!initialize 	super initialize .	x := 0.	y := 0.! !Object subclass: #TSDemoStructuralUsage	uses: TTyped	instanceVariableNames: '(TSDemoPoint)aPoint'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Demo-Structural'!!TSDemoStructuralUsage commentStamp: 'OzC 8/24/2012 17:59' prior: 0!Please see first the class TSDemoAbecedarium.This class uses all previously defined classes to verifies the annotation types. The interesting methods are in protocol 'usages'.Please continue with: TypeSystem-Demo-Union!!TSDemoStructuralUsage methodsFor: 'usages' stamp: 'OzC 8/24/2012 18:00'!testingMoveWith: (TSDemoPoint) point and: (TSDemoPoint3D) point3D	"the correct way to call methods 'move*' "	aPoint moveNominal: point.	aPoint moveStructural: point.	aPoint moveMix: point.		aPoint moveNominal: point3D.	aPoint moveStructural: point3D.	aPoint moveMix: point3D.	 ! !!TSDemoStructuralUsage methodsFor: 'usages' stamp: 'OzC 8/24/2012 18:03'!unexpectedIssueTestingMoveWith: (TSDemoAbecedarium) notAPoint	"The structural method has a problem. This accepts all objects that understand at least selectors #y and #y without asking if they are points. This is solved by introducing selector TSDemoPoint>>moveMix: "	aPoint moveStructural: notAPoint. ! !!TSDemoStructuralUsage methodsFor: 'usages' stamp: 'OzC 8/24/2012 18:05'!wrongTestingMoveWith: (TSDemoAbecedarium) notAPoint	"Please see first selector #unexpectedIssueTestingMoveWith:	Selectors #moveNominal: and #moveMix: has no problems with objects, which are not morph objects"	<typecheck: false>	aPoint  moveNominal:  notAPoint.	aPoint  moveMix: notAPoint. ! !!TSDemoStructuralUsage methodsFor: 'initialize-release' stamp: 'OzC 8/24/2012 17:38'!initialize 	super initialize .	aPoint := TSDemoPoint new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TSDemoStructuralUsage class	uses: TTyped classTrait	instanceVariableNames: ''!TSDemoPoint subclass: #TSDemoPoint3D	instanceVariableNames: '(Integer)z'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Demo-Structural'!!TSDemoPoint3D commentStamp: 'OzC 8/24/2012 17:56' prior: 0!Please see first the class TSDemoAbecedarium.This is a subclass of TSDemoPoint that only adds the third dimension to points.Please continue with: TSDemoStructuralUsage !!TSDemoPoint3D methodsFor: 'accessing' stamp: 'OzC 8/24/2012 12:31'!(Integer) z	^ z ! !