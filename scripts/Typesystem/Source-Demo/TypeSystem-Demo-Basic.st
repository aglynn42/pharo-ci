Object subclass: #TSDemoSimpleStuff	uses: TTyped	instanceVariableNames: 'dyn (Integer)int'	classVariableNames: '(Boolean)bool'	poolDictionaries: ''	category: 'TypeSystem-Demo-Basic'!!TSDemoSimpleStuff commentStamp: 'OzC 8/24/2012 16:10' prior: 0!This typed class introduces several basic features of Gradualtalk. These ares:+ Messages: where arguments and return values are verified+ Temp-vars: it shows examples of temporary variable usages + Blocks: it shows typed smalltalk blocks.+ Cast-dyn: where the dyn type and explicit cast syntax are introduced.To accomplish this, three instance variables are defined:- dyn with type: Dyn- int with type: Integer- bool with type: BooleanThis demo not only shows accepted code, but also includes reject code by the type system. Those rejected code follows the method name convention 'wrong*' and have the pragma <typecheck: false>. Removing this pragma and recompailing will shows the deteced errors by the type system.Please continue with: TypeSystem-Demo-Self !!TSDemoSimpleStuff methodsFor: 'blocks' stamp: 'OzC 8/24/2012 18:39'!(Integer -> Integer) block	"try returing the type Integer -> Boolean. Please see #wrongBlock "	^ [:(Integer)x | self add: x] ! !!TSDemoSimpleStuff methodsFor: 'blocks' stamp: 'OzC 8/24/2012 12:28'!(Integer)blockUsage 		|(Integer) temp|		temp := self block value: int.		^ self block value: temp.  ! !!TSDemoSimpleStuff methodsFor: 'blocks' stamp: 'OzC 8/24/2012 12:28'!(Integer -> Boolean)wrongBlock 	<typecheck: false>	^ [:(Integer)x | self add: x] ! !!TSDemoSimpleStuff methodsFor: 'blocks' stamp: 'OzC 8/24/2012 12:28'!(Boolean)wrongBlockUsage	<typecheck: false> 		|(Integer) temp|		temp := self correctBlock value: true.		^ self correctBlock value: temp.! !!TSDemoSimpleStuff methodsFor: 'temp-vars' stamp: 'OzC 8/24/2012 12:27'!(Boolean) tempUsage 	|(Boolean)  result|		result := bool | true.		^ result 	! !!TSDemoSimpleStuff methodsFor: 'temp-vars' stamp: 'OzC 8/24/2012 12:28'!(Integer) wrongTempUsage 	<typecheck: false>	|(Boolean)  result|		result := self add: 1.		^ self add: result	! !!TSDemoSimpleStuff methodsFor: 'cast-dyn' stamp: 'OzC 8/24/2012 12:26'!(Integer)castDynUsage	self add: (<Integer> dyn).	^ (<Integer> self dyn)   ! !!TSDemoSimpleStuff methodsFor: 'cast-dyn' stamp: 'OzC 8/24/2012 12:26'!(Integer)castUsage	self add: (<Integer> (<?>bool)).	^ (<Integer> self dyn) ! !!TSDemoSimpleStuff methodsFor: 'cast-dyn' stamp: 'OzC 8/24/2012 12:26'!(?) dyn	^ dyn ! !!TSDemoSimpleStuff methodsFor: 'cast-dyn' stamp: 'OzC 8/24/2012 12:26'!(Integer)wrongCastUsage	<typecheck: false>	self add: (<Integer> bool).	^ (<Boolean> self dyn) ! !!TSDemoSimpleStuff methodsFor: 'messages' stamp: 'OzC 8/24/2012 12:25'!(Integer) add: (Integer) x    ^ int + x ! !!TSDemoSimpleStuff methodsFor: 'messages' stamp: 'OzC 8/24/2012 12:25'!(Integer) correctInvocation	^ self add: 1 		! !!TSDemoSimpleStuff methodsFor: 'messages' stamp: 'OzC 8/24/2012 12:26'!wrongArgument	<typecheck: false>		self add: false.		self add: bool. 		! !!TSDemoSimpleStuff methodsFor: 'messages' stamp: 'OzC 8/24/2012 12:26'!(Integer) wrongReturn	<typecheck: false>	^ bool					! !!TSDemoSimpleStuff methodsFor: 'initialize-release' stamp: 'OzC 8/24/2012 17:38'!initialize 	super initialize .	int := 1.	bool := false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TSDemoSimpleStuff class	uses: TTyped classTrait	instanceVariableNames: ''!