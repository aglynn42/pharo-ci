Object subclass: #TSDemoRootObject	uses: TTyped	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Demo-Self'!!TSDemoRootObject commentStamp: 'OzC 8/24/2012 17:04' prior: 0!This simulates to be the top class of a simple class hierarchy between TSDemoRootObject (parent) and TSDemoLeafObject (child). This  hierarchy serves as example for introducing Self types, ie Self, Self instance (class side) and Self class (instance/class side).Each method has little comment of what it does. We recomend to follow this order:1. Instance side - protocol: 'self'2. Instance side - protocol: 'self-class'3. Class side - protocol: 'self-class'4. Class side - protocol: 'self-instance'5. Instance side - protocol: 'instance-creation'Please continue with: TSDemoLeafObject !!TSDemoRootObject methodsFor: 'self-class' stamp: 'OzC 8/24/2012 17:07'!(TSDemoRootObject class)myExactClass	" return the exact type of my class, which is different to self class "	^ self class ! !!TSDemoRootObject methodsFor: 'self-class' stamp: 'OzC 8/24/2012 17:23'!(Self class)mySelfClass	"the correct return type for self class (ie going one level up). Subclass will demostrate it"	^ self class ! !!TSDemoRootObject methodsFor: 'self' stamp: 'OzC 8/24/2012 17:05'!(TSDemoRootObject) myExact	" return the exact type, which is different to self "	^ self ! !!TSDemoRootObject methodsFor: 'self' stamp: 'OzC 8/24/2012 17:05'!(Self) mySelf	"the correct return type for self. Please not that the return statement is unnecessary"	^ self ! !!TSDemoRootObject methodsFor: 'instance-creation' stamp: 'OzC 8/26/2012 01:00'!(Self) anotherInstance	"the good way to create an instance through my class"	^ self class mySelfInstance ! !!TSDemoRootObject methodsFor: 'instance-creation' stamp: 'OzC 8/26/2012 01:00'!(Self instance) wrongAnotherInstance	<typecheck: false>    "self instance cannot go one level down in the instance side"	^ self class mySelfInstance  ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TSDemoRootObject class	uses: TTyped classTrait	instanceVariableNames: ''!!TSDemoRootObject class methodsFor: 'self-class' stamp: 'OzC 8/24/2012 17:12'!(Metaclass)mySelfClass 	"the type of my class is Metaclass that is the same of using Self class (see subclass) "	^ self class! !!TSDemoRootObject class methodsFor: 'self-instance' stamp: 'OzC 8/24/2012 17:11'!(TSDemoRootObject)myExactInstance	" return the exact type of my instance, which is different to self instance"	^ self new ! !!TSDemoRootObject class methodsFor: 'self-instance' stamp: 'OzC 8/24/2012 17:23'!(Self instance)mySelfInstance	"the correct return type for an instance (ie going one level down). Subclass will demostrate it"	^ self new ! !TSDemoRootObject subclass: #TSDemoLeafObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Demo-Self'!!TSDemoLeafObject commentStamp: 'OzC 8/24/2012 17:58' prior: 0!This is a subclass of TSDemoRootObject (please see the superclass first).This class has the goals to show the good/wrong way of using self types.Please follow  the order:1. Instance side - protocol: 'self'2. Instance side - protocol: 'self-class'3. Class side - protocol: 'self-class'4. Class side - protocol: 'self-instance'5. Instance side - protocol: 'instance-creation'Again here, there is a little comment in each method.Please continue with: TypeSystem-Demo-Generics!!TSDemoLeafObject methodsFor: 'self' stamp: 'OzC 8/24/2012 17:17'!(Self) selfUsage"Self is the subtype of the enclosing class (TSDemoLeafObject)"	|(Self)this |	 	this := self mySelf .! !!TSDemoLeafObject methodsFor: 'self' stamp: 'OzC 8/24/2012 17:26'!(Self) wrongSelfUsage	"This is wrong because,  the enclosing class (TSDemoLeafObject) is *not*   subtype of self "	<typecheck: false>	|(Self)this (TSDemoLeafObject) thisExact|		this := self myExact. "this is wrong, because myExact return a concrete type, ie not a Self"	      thisExact := self class instance.		^ thisExact! !!TSDemoLeafObject methodsFor: 'instance-creation' stamp: 'OzC 8/26/2012 01:00'!(Self) yetAnotherInstance	"The correct way to create an instance"	^ self class mySelfInstance ! !!TSDemoLeafObject methodsFor: 'self-class' stamp: 'OzC 8/24/2012 17:22'!(Self) classUsage"Self class is the subtype of the enclosing metaclass (TSDemoLeafObject class)"	|(Self class) myClass |		myClass := self mySelfClass. ! !!TSDemoLeafObject methodsFor: 'self-class' stamp: 'OzC 8/24/2012 17:22'!(Self class) wrongClassUsage	"This is wrong because,  the enclosing metaclass (TSDemoLeafObject class) is *not*   subtype of self  class"	<typecheck: false>	|(Self class)this (TSDemoLeafObject class) thisExact|		this := self myExactClass.	      thisExact := self class.	^ thisExact	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TSDemoLeafObject class	instanceVariableNames: ''!!TSDemoLeafObject class methodsFor: 'self-instance' stamp: 'OzC 8/24/2012 17:24'!(Self instance) instance	"Self instance is the subtype of  TSDemoLeafObject"	^ self mySelfInstance  ! !!TSDemoLeafObject class methodsFor: 'self-instance' stamp: 'OzC 8/24/2012 17:27'!(Self instance) wrongInstance	 "this is wrong, because myExactInstance return a concrete type, ie not a Self instance"	<typecheck: false>	^ self myExactInstance     ! !!TSDemoLeafObject class methodsFor: 'self-class' stamp: 'OzC 8/24/2012 17:24'!(Metaclass) accessingSelfClass	"One level up is Metaclass"	^ self mySelfClass  ! !