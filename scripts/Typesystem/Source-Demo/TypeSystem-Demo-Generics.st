Object subclass: #TSDemoMAClient	uses: TTyped	instanceVariableNames: '(TSDemoMutableArray<Integer>)intList'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Demo-Generics'!!TSDemoMAClient commentStamp: 'OzC 8/24/2012 18:53' prior: 0!Please see first the class TSDemoAbecedarium.This class includes an instance variable named intList with type (TSDemoMutableArray<Integer>). The goals of this class is to show the correct/wrong way to use generic classes. Please continue with: TypeSystem-Demo-Structural!!TSDemoMAClient methodsFor: 'usages' stamp: 'OzC 8/24/2012 18:23'!(Self)addingAnElement"Acceptable elements in the mutable array are integers and dyn values (the last one will introduce an implicit cast)"	|dyn|	dyn:= 2.	intList addElement: 1.		intList addElement: dyn.! !!TSDemoMAClient methodsFor: 'usages' stamp: 'OzC 8/24/2012 18:26'!(String)collectingElement"strings is an TSDemoMutableArray of Strings that is collected from intList"	|(TSDemoMutableArray<String>) strings|		strings := intList collect: [:(Integer)each| each printString].		^ strings elementAt: 1.! !!TSDemoMAClient methodsFor: 'usages' stamp: 'OzC 8/24/2012 18:26'!(Self)wrongAddingAnElement	"wrong element types"	<typecheck: false>	|dyn|	dyn:= 'a text'.	intList addElement: true.		intList addElement: (<String>dyn).! !!TSDemoMAClient methodsFor: 'usages' stamp: 'OzC 8/24/2012 18:29'!(Boolean) wrongCollectingElement		<typecheck: false>	|(TSDemoMutableArray<String>) strings|		strings := intList collect: [:(Boolean)each| each printString]. "collecting from an TSDemoMutableArray of Booleans instead of Integers "		^ strings elementAt: 1. "returning an incorrect type"! !!TSDemoMAClient methodsFor: 'initialize-release' stamp: 'OzC 8/24/2012 15:26'!initialize 	super initialize .	intList := TSDemoMutableArray new. "not yet instantiation"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TSDemoMAClient class	uses: TTyped classTrait	instanceVariableNames: ''!Object subclass: #TSDemoMutableArray	uses: TTyped	parametricVariableNames: 'E'	instanceVariableNames: '(OrderedCollection<E>)array'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Demo-Generics'!!TSDemoMutableArray commentStamp: 'OzC 8/24/2012 18:13' prior: 0!This class is a wrapper of OrderedCollection that uses parametric types. First it defines a type variable E and use it in the type of the instance variable array (OrderedCollection<E>). The class includes just a few methods to simulate a mutable array.We recomend to inspect all methods, specially #collect:.Please continue with: TSDemoMAClient !!TSDemoMutableArray methodsFor: 'enumerating' stamp: 'OzC 8/24/2012 18:12'!(Self<F>) collect: (E -> F) translator	"Self are self type constructors, which means they can be parameterized"	^ array collect: translator	! !!TSDemoMutableArray methodsFor: 'initialize-release' stamp: 'OzC 8/24/2012 15:01'!(Self) initialize 	super initialize.	array := OrderedCollection new. ! !!TSDemoMutableArray methodsFor: 'accessing' stamp: 'OzC 8/24/2012 18:11'!(Self) addElement: (E) element	array add: element.! !!TSDemoMutableArray methodsFor: 'accessing' stamp: 'OzC 8/24/2012 15:00'!(E)elementAt: (Integer) idx	^ array at: idx ! !!TSDemoMutableArray methodsFor: 'accessing' stamp: 'OzC 8/24/2012 15:07'!(Integer)size	^ array size	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TSDemoMutableArray class	uses: TTyped classTrait	instanceVariableNames: ''!