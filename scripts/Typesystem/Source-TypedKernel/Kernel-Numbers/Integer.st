'From Pharo1.4a of ''16 June 2011'' [Latest update: #14301] on 27 February 2012 at 10:02:36 pm'!Number subclass: #Integer	uses: TTyped	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Numbers'!!Integer commentStamp: '<historical>' prior: 0!I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.	Integer division consists of:	/	exact division, answers a fraction if result is not a whole integer	//	answers an Integer, rounded towards negative infinity	\\	is modulo rounded towards negative infinity	quo: truncated division, rounded towards zero!!Integer methodsFor: '*Files' stamp: 'EstebanAllende 2/25/2012 14:32'!(String) asBytesDescription	"Answer a terse, easily-readable representation of this Integer reprsenting a number of bytes.  Useful for file-browsers."	| (Array)suffixes |	suffixes := { 'k'"ilobytes". 'M'"egabytes". 'G'"igabytes". 'T'"erabytes". 'P'"etabytes". 'E'"xabytes". 'Z'"ettabytes". 'Y'"ottabytes"}.	suffixes size to: 1 by: -1 do:		[ : (Integer)index |  | units |		units := 1000 raisedTo: index.		self > units ifTrue: [ ^ ((self / units) asFloat roundTo: 0.01) asString, (suffixes at: index) ] ].	^ self asString! !!Integer methodsFor: '*Graphics-Primitives' stamp: 'EstebanAllende 2/25/2012 14:41'!(Color) asColorOfDepth: (Integer)d	"Return a color value representing the receiver as color of the given depth"	^Color colorFromPixelValue: self depth: d! !!Integer methodsFor: '*System-Hashing-Core' stamp: 'EstebanAllende 2/25/2012 19:56'!(Array) asArray	| (Stream)stream |	stream := Array new writeStream.	self digitLength to: 1 by: -1 do: [:(Integer)digitIndex |		stream nextPut: (self digitAt: digitIndex)].	^ stream contents! !!Integer methodsFor: '*System-Hashing-Core' stamp: 'EstebanAllende 2/25/2012 19:56'!(ByteArray) asByteArray	| (Stream)stream |	stream := ByteArray new writeStream.	self digitLength to: 1 by: -1 do: [:(Integer)digitIndex |		stream nextPut: (self digitAt: digitIndex)].	^ stream contents! !!Integer methodsFor: '*System-Hashing-Core' stamp: 'EstebanAllende 2/25/2012 19:57'!(ByteArray) asByteArrayOfSize: (Integer) aSize 	"Answer a ByteArray of aSize with my value, most-significant byte first."	| (ByteArray)answer (Integer)digitPos |	aSize < self digitLength ifTrue: [ self error: 'number to large for byte array' ].	answer := ByteArray new: aSize.	digitPos := 1.	aSize 		to: aSize - self digitLength + 1		by: -1		do: 			[ :(Integer)pos | 			answer 				at: pos				put: (self digitAt: digitPos).			digitPos := digitPos + 1 ].	^ answer! !!Integer methodsFor: '*Tools-Explorer' stamp: 'EstebanAllende 2/25/2012 19:58'!(Array) explorerContents	^{		'hexadecimal' -> 16.		'octal' -> 8.		'binary' -> 2	} collect: [:(Association)each |		ObjectExplorerWrapper with: each key translated name: (self printStringBase: each value) model: self]! !!Integer methodsFor: '*Tools-Explorer' stamp: 'EstebanAllende 2/25/2012 19:58'!(Boolean)hasContentsInExplorer	^true! !!Integer methodsFor: 'accessing' stamp: 'EstebanAllende 2/24/2012 23:51'!(Integer) denominator	"Let an Integer be polymorphic to a Fraction. See #isFraction."	^1! !!Integer methodsFor: 'accessing' stamp: 'EstebanAllende 2/24/2012 23:52'!(Integer) numerator	"Let an Integer be polymorphic to a Fraction. See #isFraction."	^self! !!Integer methodsFor: 'arithmetic' stamp: 'EstebanAllende 2/25/2012 20:20'!(?) * (Number)aNumber	"Refer to the comment in Number * " 	aNumber isInteger ifTrue:		[^ self digitMultiply: (<Integer>aNumber)					neg: self negative ~~ aNumber negative].	^ aNumber adaptToInteger: self andSend: #*! !!Integer methodsFor: 'arithmetic' stamp: 'EstebanAllende 2/25/2012 20:22'!(?) + (Number)aNumber	"Refer to the comment in Number + "	aNumber isInteger ifTrue:		[self negative == aNumber negative			ifTrue: [^ (self digitAdd: (<Integer>aNumber) normalize)]			ifFalse: [^ self digitSubtract: (<Integer>aNumber)]].	^ aNumber adaptToInteger: self andSend: #+! !!Integer methodsFor: 'arithmetic' stamp: 'EstebanAllende 2/25/2012 20:22'!(?) - (Number)aNumber	"Refer to the comment in Number - "	aNumber isInteger ifTrue:		[self negative == aNumber negative			ifTrue: [^ self digitSubtract: (<Integer>aNumber)]			ifFalse: [^ (self digitAdd: (<Integer>aNumber)) normalize]].	^ aNumber adaptToInteger: self andSend: #-! !!Integer methodsFor: 'arithmetic' stamp: 'EstebanAllende 2/25/2012 20:23'!(?) / (Number)aNumber	"Refer to the comment in Number / "	| quoRem |	aNumber isInteger ifTrue:		[quoRem := self digitDiv: (<Integer>aNumber) abs							neg: self negative ~~ aNumber negative.		(quoRem at: 2) = 0			ifTrue: [^ (quoRem at: 1) normalize]			ifFalse: [^ (Fraction numerator: self denominator: aNumber) reduced]].	^ aNumber adaptToInteger: self andSend: #/! !!Integer methodsFor: 'arithmetic' stamp: 'EstebanAllende 2/25/2012 20:23'!(Integer) // (Number)aNumber 	| q |	#Numeric.	"Changed 200/01/19 For ANSI support."	aNumber = 0 ifTrue: [^ (ZeroDivide dividend: self) signal"<- Chg"].	self = 0 ifTrue: [^ 0].	q := self quo: aNumber.	"Refer to the comment in Number|//."	(q negative		ifTrue: [q * aNumber ~= self]		ifFalse: [q = 0 and: [self negative ~= aNumber negative]])		ifTrue: [^ q - 1"Truncate towards minus infinity."]		ifFalse: [^ q]! !!Integer methodsFor: 'arithmetic' stamp: 'EstebanAllende 2/25/2012 20:23'!(Integer) \\\ (Integer)anInteger 	"a modulo method for use in DSA. Be careful if you try to use this elsewhere."	^(<Integer>self \\ anInteger)! !!Integer methodsFor: 'arithmetic' stamp: 'EstebanAllende 2/25/2012 00:04'!(Integer) alignedTo: (Integer)anInteger	"Answer the smallest number not less than receiver that is a multiple of anInteger."	^(self+anInteger-1//anInteger)*anInteger"5 alignedTo: 2""12 alignedTo: 3"! !!Integer methodsFor: 'arithmetic' stamp: 'EstebanAllende 2/25/2012 00:05'!(Integer) crossSumBase: (Integer)aBase	|aResult|	"Precondition"	[aBase isInteger and: [aBase >=2]] assert.	self < 0 ifTrue: [^self negated crossSumBase: aBase].	self < aBase ifTrue: [^ self].	aResult := self \\ aBase + (self // aBase crossSumBase: aBase).	"Postcondition	E.g. 18 crossSumBase: 10 -> 9 => 18\\(10-1) = 0"	[((aResult \\ (aBase - 1) = 0)) = ((self \\ (aBase - 1)) =0)] assert.	^aResult! !!Integer methodsFor: 'arithmetic' stamp: 'EstebanAllende 2/25/2012 20:10'!(Integer)quo: (Number)aNumber 	"Refer to the comment in Number quo: "	| (Boolean)ng (Integer)quo |	aNumber isInteger ifTrue: 		[ng := self negative == aNumber negative == false.		quo := (self digitDiv:			(aNumber class == SmallInteger				ifTrue: [aNumber abs]				ifFalse: [aNumber])			neg: ng) at: 1.		^ quo normalize].	^ aNumber adaptToInteger: self andSend: #quo:! !!Integer methodsFor: 'arithmetic' stamp: 'EstebanAllende 2/25/2012 00:24'!(Integer) reciprocalModulo: (Integer)n	"Answer an integer x such that (self * x) \\ n = 1, x > 0, x < n.	Raise an error if there is no such integer.	The algorithm is a non extended euclidean modular inversion called NINV.	It is described in this article:		'Using an RSA Accelerator for Modular Inversion'	by Martin Seysen. See http://www.iacr.org/archive/ches2005/017.pdf"	| (Integer)u (Integer)v (Integer)f (Integer)fPlusN (Integer)b (Integer)result (Integer)result2 |	((self <= 0) or: [n <= 0]) ifTrue: [self error: 'self and n must be greater than zero'].	self >= n ifTrue: [self error: 'self must be < n'].	b := n highBit + 1.	f := 1 bitShift: b.	v := (self bitShift: b) + 1.	u := n bitShift: b.	fPlusN := f + n.	[v >= fPlusN] whileTrue:		[v := u \\\ (u := v)].	result := v - f.	(result2 := result + n) > 0		ifFalse: [self error: 'no inverse'].	^result positive		ifTrue: [result]		ifFalse: [result2]! !!Integer methodsFor: 'benchmarks' stamp: 'EstebanAllende 2/25/2012 00:26'!(Integer)benchFib  "Handy send-heavy benchmark"	"(result // seconds to run) = approx calls per second"	" | r t |	  t := Time millisecondsToRun: [r := 26 benchFib].	  (r * 1000) // t"	"138000 on a Mac 8100/100"	^ self < 2		ifTrue: [1] 		ifFalse: [(self-1) benchFib + (self-2) benchFib + 1]! !!Integer methodsFor: 'benchmarks' stamp: 'EstebanAllende 2/25/2012 20:00'!(Integer) benchmark  "Handy bytecode-heavy benchmark"	"(500000 // time to run) = approx bytecodes per second"	"5000000 // (Time millisecondsToRun: [10 benchmark]) * 1000"	"3059000 on a Mac 8100/100"    | (Integer)size (Array)flags (Integer)prime (Integer)k (Integer)count |    size := 8190.    1 to: self do:        [:(Integer)iter |        count := 0.        flags := (Array new: size) atAllPut: true.        1 to: size do:            [:(Integer)i | (flags at: i) ifTrue:                [prime := i+1.                k := i + prime.                [k <= size] whileTrue:                    [flags at: k put: false.                    k := k + prime].                count := count + 1]]].    ^ count! !!Integer methodsFor: 'benchmarks' stamp: 'EstebanAllende 2/25/2012 00:28'!(Integer) tinyBenchmarks	"Report the results of running the two tiny Squeak benchmarks.	ar 9/10/1999: Adjusted to run at least 1 sec to get more stable results"	"0 tinyBenchmarks"	"On a 292 MHz G3 Mac: 22727272 bytecodes/sec; 984169 sends/sec"	"On a 400 MHz PII/Win98:  18028169 bytecodes/sec; 1081272 sends/sec"	| (Integer)t1 (Integer)t2 (Integer)r (Integer)n1 (Integer)n2 |	n1 := 1.	[t1 := Time millisecondsToRun: [n1 benchmark].	t1 < 1000] whileTrue:[n1 := n1 * 2]. "Note: #benchmark's runtime is about O(n)"	n2 := 28.	[t2 := Time millisecondsToRun: [r := n2 benchFib].	t2 < 1000] whileTrue:[n2 := n2 + 1]. "Note: #benchFib's runtime is about O(n^2)."	^ ((n1 * 500000 * 1000) // t1) printString, ' bytecodes/sec; ',	  ((r * 1000) // t2) printString, ' sends/sec'! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 00:28'!(Integer)<< (Integer)shiftAmount	"left shift"		shiftAmount < 0 ifTrue: [self error: 'negative arg'].	^ self bitShift: shiftAmount! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 00:29'!(Integer) >> (Integer)shiftAmount	"right shift"		shiftAmount < 0 ifTrue: [self error: 'negative arg'].	^ self bitShift: 0 - shiftAmount! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 00:32'!(Boolean)allMask: (Integer)mask 	"Treat the argument as a bit mask. Answer whether all of the bits that 	are 1 in the argument are 1 in the receiver."	^mask = (self bitAnd: mask)! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:43'!(Boolean) anyBitOfMagnitudeFrom: (Integer)start to: (Integer)stopArg 	"Tests for any magnitude bits in the interval from start to stopArg."	"Primitive fixed in LargeIntegers v1.2. If you have an earlier version 	comment out the primitive call (using this ST method then)."	| (Integer)magnitude (Integer)firstDigitIx (Integer)lastDigitIx (Integer)rightShift (Integer)leftShift (Integer)stop |	<primitive: 'primAnyBitFromTo' module:'LargeIntegers'>	start < 1 | (stopArg < 1)		ifTrue: [^ self error: 'out of range'].	magnitude := self abs.	stop := stopArg min: magnitude highBit.	start > stop		ifTrue: [^ false].	firstDigitIx := start - 1 // 8 + 1.	lastDigitIx := stop - 1 // 8 + 1.	rightShift := (start - 1 \\ 8) negated.	leftShift := 7 - (stop - 1 \\ 8).	firstDigitIx = lastDigitIx		ifTrue: [| (Integer)digit (Integer)mask | 			mask := (255 bitShift: rightShift negated)						bitAnd: (255 bitShift: leftShift negated).			digit := magnitude digitAt: firstDigitIx.			^ (digit bitAnd: mask)				~= 0].	((magnitude digitAt: firstDigitIx)			bitShift: rightShift)			~= 0		ifTrue: [^ true].	firstDigitIx + 1		to: lastDigitIx - 1		do: [:(Integer)ix | (magnitude digitAt: ix)					~= 0				ifTrue: [^ true]].	(((magnitude digitAt: lastDigitIx)			bitShift: leftShift)			bitAnd: 255)			~= 0		ifTrue: [^ true].	^ false! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:32'!(Boolean) anyMask: (Integer)mask 	"Treat the argument as a bit mask. Answer whether any of the bits that 	are 1 in the argument are 1 in the receiver."	^0 ~= (self bitAnd: mask)! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 20:25'!(Integer) bitAnd: (Integer)n 	"Answer an Integer whose bits are the logical AND of the receiver's bits  	and those of the argument, n."	| (Integer)norm |	<primitive: 'primDigitBitAnd' module:'LargeIntegers'>	norm := n normalize.	^ self		digitLogic: norm		op: #bitAnd:		length: (self digitLength max: norm digitLength)! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:42'!(Integer) bitAt: (Integer)anInteger	"Answer 1 if the bit at position anInteger is set to 1, 0 otherwise.	self is considered an infinite sequence of bits, so anInteger can be any strictly positive integer.	Bit at position 1 is the least significant bit.	Negative numbers are in two-complements.		This is a naive implementation that can be refined in subclass for speed"		^(self bitShift: 1 - anInteger) bitAnd: 1! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 20:24'!(Integer) bitAt: (Integer) anInteger put: (Integer)value	"Answer a new Integer that has the bit of rank anInteger set to value.	The bit value should be 0 or 1, otherwise raise an Error.	The bits are indexed starting at 1 for the least significant bit.	For negative integers, operate on 2-complement representation."		| b |	b := self bitAt: anInteger.	b = value ifTrue: [^self].	0 = value ifTrue: [^self bitAnd: (1 bitShift: anInteger - 1) bitInvert].	1 = value ifTrue: [^self bitOr: (1 bitShift: anInteger - 1)].	self error: 'bit value should be 0 or 1'! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:44'!(Integer) bitClear: (Integer)aMask 	"Answer an Integer equal to the receiver, except with all bits cleared that are set in aMask."	^ (self bitOr: aMask) - aMask! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:44'!(Integer) bitInvert	"Answer an Integer whose bits are the logical negation of the receiver's bits.	Numbers are interpreted as having 2's-complement representation."	^ -1 - self.! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:45'!(Integer) bitInvert32	"Answer the 32-bit complement of the receiver."	^ self bitXor: 16rFFFFFFFF! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:46'!(Integer) bitOr: (Integer)n 	"Answer an Integer whose bits are the logical OR of the receiver's bits  	and those of the argument, n."	| (Integer)norm |	<primitive: 'primDigitBitOr' module:'LargeIntegers'>	norm := n normalize.	^ self		digitLogic: norm		op: #bitOr:		length: (self digitLength max: norm digitLength)! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:46'!(Integer) bitShift: (Integer)shiftCount 	"Answer an Integer whose value (in twos-complement representation) is  	the receiver's value (in twos-complement representation) shifted left by 	the number of bits indicated by the argument. Negative arguments  	shift right. Zeros are shifted in from the right in left shifts."	| (Integer)magnitudeShift |	magnitudeShift := self bitShiftMagnitude: shiftCount.	^ ((self negative and: [shiftCount negative])		and: [self anyBitOfMagnitudeFrom: 1 to: shiftCount negated])		ifTrue: [magnitudeShift - 1]		ifFalse: [magnitudeShift]! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:46'!(Integer) bitShiftMagnitude: (Integer)shiftCount 	"Answer an Integer whose value (in magnitude representation) is  	the receiver's value (in magnitude representation) shifted left by  	the number of bits indicated by the argument. Negative arguments	shift right. Zeros are shifted in from the right in left shifts."	| (Integer)rShift |	<primitive: 'primDigitBitShiftMagnitude' module:'LargeIntegers'>	shiftCount >= 0 ifTrue: [^ self digitLshift: shiftCount].	rShift := 0 - shiftCount.	^ (self		digitRshift: (rShift bitAnd: 7)		bytes: (rShift bitShift: -3)		lookfirst: self digitLength) normalize! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:47'!(String)bitString	"Returns a string representing the receiver in binary form"	"2 bitString 		'0000000000000000000000000000010'		-1 bitString	 		'1111111111111111111111111111111'		-2 bitString 		'1111111111111111111111111111110'	"      ^(self bitStringLength to: 1 by: -1) 		collect: [:(Integer)i | Character value: $0 charCode + (self bitAt: i)] as: String! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:48'!(Integer) bitStringLength      ^self digitLength * 8           	"make sure positive integer bitString always begins with 0"           + (self positive ifTrue: [1] ifFalse: [0])! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:48'!(Integer) bitXor: (Integer)n 	"Answer an Integer whose bits are the logical XOR of the receiver's bits  	and those of the argument, n."	| (Integer)norm |	<primitive: 'primDigitBitXor' module:'LargeIntegers'>	norm := n normalize.	^ self		digitLogic: norm		op: #bitXor:		length: (self digitLength max: norm digitLength)! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:48'!(Integer) highBit	"Answer the index of the high order bit of the receiver, or zero if the  	receiver is zero. Raise an error if the receiver is negative, since  	negative integers are defined to have an infinite number of leading 1's 	in 2's-complement arithmetic. Use >>highBitOfMagnitude if you want to  	get the highest bit of the magnitude."	^ self subclassResponsibility! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:49'!(Integer) highBitOfMagnitude	"Answer the index of the high order bit of the magnitude of the  	receiver, or zero if the receiver is zero."	^ self subclassResponsibility! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:49'!(Integer) lowBit	"Answer the index of the low order bit of this number."	| (Integer)index |	self = 0 ifTrue: [ ^ 0 ].	index := 1.	[ (self digitAt: index) = 0 ]		whileTrue:			[ index := index + 1 ].	^ (self digitAt: index) lowBit + (8 * (index - 1))! !!Integer methodsFor: 'bit manipulation' stamp: 'EstebanAllende 2/25/2012 01:49'!(Boolean) noMask: (Integer)mask 	"Treat the argument as a bit mask. Answer whether none of the bits that 	are 1 in the argument are 1 in the receiver."	^0 = (self bitAnd: mask)! !!Integer methodsFor: 'comparing' stamp: 'EstebanAllende 2/25/2012 20:27'!(Boolean) < (Magnitude)aNumber	aNumber isInteger ifTrue:		[self negative == (<Integer>aNumber) negative			ifTrue: [self negative						ifTrue: [^ (self digitCompare: (<Integer>aNumber)) > 0]						ifFalse: [^ (self digitCompare: (<Integer>aNumber)) < 0]]			ifFalse: [^ self negative]].	^ aNumber adaptToInteger: self andCompare: #<! !!Integer methodsFor: 'comparing' stamp: 'EstebanAllende 2/25/2012 20:28'!<= aNumber	aNumber isInteger ifTrue:		[self negative == (<Integer>aNumber) negative			ifTrue: [self negative						ifTrue: [^ (self digitCompare: (<Integer>aNumber)) >= 0]						ifFalse: [^ (self digitCompare: (<Integer>aNumber)) <= 0]]			ifFalse: [^ self negative]].	^ aNumber adaptToInteger: self andCompare: #<=! !!Integer methodsFor: 'comparing' stamp: 'EstebanAllende 2/25/2012 20:28'!(Boolean) = (Object)aNumber	aNumber isNumber ifFalse: [^ false].	aNumber isInteger ifTrue:		[(<Integer>aNumber) negative == self negative			ifTrue: [^ (self digitCompare: (<Integer>aNumber)) = 0]			ifFalse: [^ false]].	^ aNumber adaptToInteger: self andCompare: #=! !!Integer methodsFor: 'comparing' stamp: 'EstebanAllende 2/25/2012 20:28'!(Boolean) > (Magnitude)aNumber	aNumber isInteger ifTrue:		[self negative == (<Integer>aNumber) negative			ifTrue: [self negative						ifTrue: [^(self digitCompare: (<Integer>aNumber)) < 0]						ifFalse: [^(self digitCompare: (<Integer>aNumber)) > 0]]			ifFalse: [^ (<Integer>aNumber) negative]].	^ aNumber adaptToInteger: self andCompare: #>! !!Integer methodsFor: 'comparing' stamp: 'EstebanAllende 2/25/2012 20:28'!(Boolean) >= (Magnitude)aNumber	aNumber isInteger ifTrue:		[self negative == (<Integer>aNumber) negative			ifTrue: [self negative						ifTrue: [^(self digitCompare: (<Integer>aNumber)) <= 0]						ifFalse: [^(self digitCompare: (<Integer>aNumber)) >= 0]]			ifFalse: [^ (<Integer>aNumber) negative]].	^ aNumber adaptToInteger: self andCompare: #>=! !!Integer methodsFor: 'converting' stamp: 'EstebanAllende 2/25/2012 02:00'!(?) adaptToFraction: (Fraction)rcvr andSend: (Symbol)selector	"If I am involved in arithmetic with a Fraction, convert me to a Fraction."	^ rcvr perform: selector with: (Fraction numerator: self denominator: 1)! !!Integer methodsFor: 'converting' stamp: 'EstebanAllende 2/25/2012 02:00'!(Character) asCharacter	"Answer the Character whose value is the receiver."	^Character value: self! !!Integer methodsFor: 'converting' stamp: 'EstebanAllende 2/25/2012 02:00'!(Float) asFloat	"Answer a Float that best approximates the value of the receiver."		^self subclassResponsibility! !!Integer methodsFor: 'converting' stamp: 'EstebanAllende 2/25/2012 02:02'!(Integer)asFraction	"Answer a Fraction that represents the value of the receiver.	Since an Integer already behaves as a special kind of Fraction, no conversion is required, see #isFraction."	^self! !!Integer methodsFor: 'converting' stamp: 'EstebanAllende 2/25/2012 02:02'!(Character) asHexDigit	^'0123456789ABCDEF' at: self+1! !!Integer methodsFor: 'converting' stamp: 'EstebanAllende 2/25/2012 02:02'!(Integer) asInteger	"Answer with the receiver itself."	^self! !!Integer methodsFor: 'converting' stamp: 'EstebanAllende 2/25/2012 02:02'!(ScaledDecimal) asScaledDecimal	"The number of significant digits of the answer is the same as the number of decimal digits in the receiver."	^ ScaledDecimal newFromNumber: self scale: 0! !!Integer methodsFor: 'converting' stamp: 'EstebanAllende 2/25/2012 02:02'!(Year) asYear 	^ Year year: self  ! !!Integer methodsFor: 'converting' stamp: 'EstebanAllende 2/25/2012 02:03'!(String)hex	"Print the receiver as hex, prefixed with 16r.  DO NOT CHANGE THIS!!  The Cog VMMaker depends on this.	 Consider using any of		printStringHex		printStringBase: 16		printStringBase: 16 length: 8 padded: true		storeStringHex		storeStringBase: 16		storeStringBase: 16 length: 11 padded: true"	^self storeStringBase: 16! !!Integer methodsFor: 'enumerating' stamp: 'EstebanAllende 2/25/2012 02:05'!(Self) timesRepeat: (→Object) aBlock 	"Evaluate the argument, aBlock, the number of times represented by the 	receiver."	|(Integer)count |	count := 1.	[count <= self]		whileTrue: 			[aBlock value.			count := count + 1]! !!Integer methodsFor: 'mathematical functions' stamp: 'EstebanAllende 2/25/2012 02:05'!(Integer) factorial	"Answer the factorial of the receiver."	self = 0 ifTrue: [^ 1].	self > 0 ifTrue: [^ self * (self - 1) factorial].	self error: 'Not valid for negative integers'! !!Integer methodsFor: 'mathematical functions' stamp: 'EstebanAllende 2/25/2012 02:11'!(Integer) gcd: (Integer)anInteger	"See Knuth, Vol 2, 4.5.2, Algorithm L"	"Initialize"	| (SmallInteger)higher (Integer)u (Integer)v (Integer)k (Integer)uHat (Integer)vHat (Integer)a (Integer)b (Integer)c (Integer)d (Integer)vPrime (Integer)vPrimePrime (Integer)q (Integer)t |	higher := SmallInteger maxVal highBit.	u := (<Integer>self) abs max: (v := anInteger abs).	v := (<Integer>self) abs min: v.	[v class == SmallInteger]		whileFalse: 			[(uHat := u bitShift: (k := higher - u highBit)) class == SmallInteger				ifFalse: 					[k := k - 1.					uHat := uHat bitShift: -1].			vHat := v bitShift: k.			a := 1.			b := 0.			c := 0.			d := 1.			"Test quotient"			[(vPrime := vHat + d) ~= 0				and: [(vPrimePrime := vHat + c) ~= 0 and: [(q := uHat + a // vPrimePrime) = (uHat + b // vPrime)]]]				whileTrue: 					["Emulate Euclid"					c := a - (q * (a := c)).					d := b - (q * (b := d)).					vHat := uHat - (q * (uHat := vHat))].			"Multiprecision step"			b = 0				ifTrue: 					[v := (<Integer>u rem: (u := v))]				ifFalse: 					[t := u * a + (v * b).					v := u * c + (v * d).					u := t]].	^ v gcd: u! !!Integer methodsFor: 'mathematical functions' stamp: 'EstebanAllende 2/25/2012 02:28'!(Integer)lcm: (Integer)n 	"Answer the least common multiple of the receiver and n."	^self // (self gcd: n) * n! !!Integer methodsFor: 'mathematical functions' stamp: 'EstebanAllende 2/25/2012 02:37'!(Number)nthRoot: (Integer)aPositiveInteger	"Answer the nth root of the receiver.	See #nthRootAlt: for an alternative implementation."	| (Float)selfAsFloat (Float)floatResult (Integer)guess (Float)delta (Integer)higher (Integer)lower (Integer)raised |	selfAsFloat := self asFloat.	"If we can't do Float arithmetic because we are too big, then look for an exact answer in exact arithmetic"	selfAsFloat isInfinite ifTrue: [		guess := self nthRootTruncated: aPositiveInteger.		(guess raisedToInteger: aPositiveInteger) = self			ifTrue: [ ^ guess ].		"Nothing else can be done. No exact answer means answer must be a Float.		Answer the best we have."		^guess asFloat ].	floatResult := selfAsFloat nthRoot: aPositiveInteger.	guess := floatResult rounded.	"If got an exact answer, answer it."	raised := (<Integer>guess raisedToInteger: aPositiveInteger).	raised = self		ifTrue: [ ^ guess ].	"In this case, maybe it failed because we are such a big integer that the Float	method gets inexact, even if we are a whole square number.	Note 1(jmv): This algorithm is faster than #nthRootTruncated: for big n (aPositiveInteger)	but fails if self asFloat isInfinite.	Note 2(jmv): The algorithms I found for computing the nthRoot would havily use	very large fractions. I wrote this one, that doesn't create fractions."	selfAsFloat abs >= (Float maxExactInteger asFloat raisedToInteger: aPositiveInteger)		ifTrue: [			raised > self				ifTrue: [					higher := guess.					delta :=  floatResult predecessor - floatResult.					[						floatResult := floatResult + delta.						lower := floatResult rounded.						(lower raisedToInteger: aPositiveInteger) > self ] whileTrue: [							delta := delta * 2.							higher := lower ] ]				ifFalse: [					lower := guess.					delta :=  floatResult successor - floatResult.					[						floatResult := floatResult + delta.						higher := floatResult rounded.						(higher raisedToInteger: aPositiveInteger) < self ] whileTrue: [							delta := delta * 2.							lower := higher ]].			[ higher - lower > 1 ] whileTrue: [				guess := lower + higher // 2.				raised := (<Integer>guess raisedToInteger: aPositiveInteger).				raised = self					ifTrue: [						^ guess ].				raised > self					ifTrue: [ higher := guess ]					ifFalse: [ lower := guess ]]].	"We need an approximate result"	^floatResult! !!Integer methodsFor: 'mathematical functions' stamp: 'EstebanAllende 2/25/2012 02:39'!(Integer) nthRootTruncated: (Integer)aPositiveInteger	"Answer the integer part of the nth root of the receiver."	| (Integer)guess (Integer)guessToTheNthMinusOne (Integer)delta |	self = 0 ifTrue: [^0].	self negative		ifTrue:			[aPositiveInteger even ifTrue: [ ArithmeticError signal: 'Negative numbers don''t have even roots.' ].			^(self negated nthRootTruncated: aPositiveInteger) negated].	guess := 1 bitShift: self highBitOfMagnitude + aPositiveInteger - 1 // aPositiveInteger.	[		guessToTheNthMinusOne := (<Integer>guess raisedTo: aPositiveInteger - 1).		delta := (guess * guessToTheNthMinusOne - self) // (guessToTheNthMinusOne * aPositiveInteger).		delta = 0 ] whileFalse:			[ guess := guess - delta ].	( (guess := guess - 1) raisedTo: aPositiveInteger) > self  ifTrue:			[ guess := guess - 1 ].	^guess! !!Integer methodsFor: 'mathematical functions' stamp: 'EstebanAllende 2/25/2012 02:50'!(Integer) raisedToInteger: (Integer)exp modulo: (Integer)m	(exp = 0) ifTrue: [^ 1].	exp even		ifTrue: [^ (<Integer>(self raisedToInteger: (exp // 2) modulo: m) squared \\ m)]		ifFalse: [^ (<Integer>(self * (self raisedToInteger: (exp - 1) modulo: m)) \\ m)].! !!Integer methodsFor: 'mathematical functions' stamp: 'EstebanAllende 2/25/2012 02:51'!(Integer) raisedTo: (Integer)y modulo: (Integer)n	"Answer the modular exponential. Code by Jesse Welton."	| (Integer)s (Integer)t (Integer)u |	s := 1.	t := self.	u := y.	[u = 0] whileFalse: [		u odd ifTrue: [			s := s * t.			s >= n ifTrue: [s := s \\\ n]].		t := t * t.		t >= n ifTrue: [t := t \\\ n].		u := u bitShift: -1].	^ s.! !!Integer methodsFor: 'mathematical functions' stamp: 'EstebanAllende 2/25/2012 02:52'!(Number)sqrt	"Answer the square root of the receiver."	| (Float)selfAsFloat (Float)floatResult (Integer)guess |	selfAsFloat := self asFloat.	floatResult := selfAsFloat sqrt.	floatResult isInfinite ifFalse: [		guess := floatResult truncated.		"If got an exact answer, answer it. Otherwise answer float approximate answer."		guess squared = self			ifTrue: [ ^ guess ]].	"In this case, maybe it failed because we are such a big integer that the Float method becomes	inexact, even if we are a whole square number. So, try the slower but more general method"	selfAsFloat >= Float maxExactInteger asFloat squared		ifTrue: [			guess := self sqrtFloor.			guess squared = self ifTrue: [				^guess ].						"Nothing else can be done. No exact answer means answer must be a Float.			Answer the best we have which is the rounded sqrt."			guess := (self * 4) sqrtFloor.			^(guess // 2 + (guess \\ 2)) asFloat].	"We need an approximate result"	^floatResult! !!Integer methodsFor: 'mathematical functions' stamp: 'EstebanAllende 2/25/2012 02:55'!(Integer) take: (Integer)kk	"Return the number of combinations of (self) elements taken kk at a time.  For 6 take 3, this is 6*5*4 / (1*2*3).  Zero outside of Pascal's triangle.  Use a trick to go faster."	" 6 take: 3  "	| (Integer)num (Integer)denom |	kk < 0 ifTrue: [^ 0].	kk > self ifTrue: [^ 0].	num := 1.	self to: (kk max: self-kk) + 1 by: -1 do: [:(Integer)factor | num := num * factor].	denom := 1.	1 to: (kk min: self-kk) do: [:(Integer)factor | denom := denom * factor].	^ num // denom! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 02:55'!(String) asStringWithCommas	"123456789 asStringWithCommas"	"-123456789 asStringWithCommas"	| (String)digits |	digits := self abs printString.	^ String streamContents:		[:(Stream)strm | 		self sign = -1 ifTrue: [strm nextPut: $-].		1 to: digits size do: 			[:(Integer)i | strm nextPut: (digits at: i).			(i < digits size and: [(i - digits size) \\ 3 = 0])				ifTrue: [strm nextPut: $,]]]! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 02:56'!(String) asStringWithCommasSigned	"123456789 asStringWithCommasSigned"	"-123456789 asStringWithCommasSigned"	| (String)digits |	digits := self abs printString.	^ String streamContents:		[:(Stream)strm | 		self sign = -1 ifTrue: [strm nextPut: $-] ifFalse:[strm nextPut: $+].		1 to: digits size do: 			[:(Integer)i | strm nextPut: (digits at: i).			(i < digits size and: [(i - digits size) \\ 3 = 0])				ifTrue: [strm nextPut: $,]]]! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 02:57'!(String)asTwoCharacterString	"Answer a two-character string representing the receiver, with leading zero if required.  Intended for use with integers in the range 0 to 99, but plausible replies given for other values too"	^ (self >= 0 and: [self < 10])		ifTrue:	['0', self printString]		ifFalse:	[self printString copyFrom: 1 to: 2]"2 asTwoCharacterString11 asTwoCharacterString1943 asTwoCharacterString0 asTwoCharacterString-2 asTwoCharacterString-234 asTwoCharacterString"! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 21:48'!(String) asWords	"SmallInteger maxVal asWords"	| (Array)mils (String)minus (String)three (Integer)num (String)answer (Integer)milCount |	self = 0 ifTrue: [^'zero'].	mils := #('' ' thousand' ' million' ' billion' ' trillion' ' quadrillion' ' quintillion' ' sextillion' ' septillion' ' octillion' ' nonillion' ' decillion' ' undecillion' ' duodecillion' ' tredecillion' ' quattuordecillion' ' quindecillion' ' sexdecillion' ' septendecillion' ' octodecillion' ' novemdecillion' ' vigintillion').	num := self.	minus := ''.	self < 0 ifTrue: [		minus := 'negative '.		num := num negated.	].	answer := String new.	milCount := 1.	[num > 0] whileTrue: [		three := (<SmallInteger>(num \\ 1000)) threeDigitName.		num := num // 1000.		three isEmpty ifFalse: [			answer isEmpty ifFalse: [				answer := ', ',answer			].			answer := three,(mils at: milCount),answer.		].		milCount := milCount + 1.	].	^minus,answer! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 10:53'!(Integer) destinationBuffer:(Integer)digitLength  digitLength <= 1		ifTrue: [self]		ifFalse: [LargePositiveInteger new: digitLength].! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 10:54'!(Array) digitBuffer:(Integer)digitLength  ^Array new:digitLength*8.! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 10:54'!(Boolean) isLiteral	^true! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 10:54'!(Integer) numberOfDigits	"Return how many digits are necessary to print this number in base 10.	This does not count any place for minus sign, radix prefix or whatever."	^ self numberOfDigitsInBase: 10 ! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 10:56'!(Integer) numberOfDigitsInBase: (Integer)b 	"Return how many digits are necessary to print this number in base b.	This does not count any place for minus sign, radix prefix or whatever.	Note that this algorithm may cost a few operations on LargeInteger."	| (Integer)nDigits (Integer)q (Integer)total |	self negative ifTrue: [^self negated numberOfDigitsInBase: b].	self < b ifTrue: [^1].	b isPowerOfTwo ifTrue: [^self highBit + b highBit - 2 quo: b highBit - 1].		"A conversion from base 2 to base b has to be performed.	This algorithm avoids Float computations like (self log: b) floor + 1,	1) because they are inexact	2) because LargeInteger might overflow	3) because this algorithm might be cheaper than conversion"	q := self.	total := 0.	["Make an initial nDigits guess that is lower than or equal to required number of digits"	nDigits := b = 10		ifTrue: [((q highBit - 1) * 1233 >> 12) + 1. "This is because (2 log)/(10 log)*4096 is slightly greater than 1233"]		ifFalse: [q highBit quo: b highBit].	total := total + nDigits.		"See how many digits remains above these first nDigits guess"	(q := q quo: (b raisedToInteger: nDigits)) < b] whileFalse.	^q = 0		ifTrue: [total]		ifFalse: [total + 1]! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 10:57'!(Self) printOn: (Stream)aStream	^self printOn: aStream base: 10! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 10:57'!(Self) printOn: (Stream)outputStream base: (Integer)baseInteger showRadix: (Boolean)flagBoolean 	"Write a sequence of characters that describes the receiver in radix 	baseInteger with optional radix specifier. 	The result is undefined if baseInteger less than 2 or greater than 36."	| (String)tempString (Integer)startPos |	#Numeric.	"2000/03/04  Harmon R. Added ANSI <integer> protocol"	tempString := self printStringRadix: baseInteger.	flagBoolean ifTrue: [^ outputStream nextPutAll: tempString].	startPos := (tempString indexOf: $r ifAbsent: [self error: 'radix indicator not found.'])				+ 1.	self negative ifTrue: [outputStream nextPut: $-].	outputStream nextPutAll: (tempString copyFrom: startPos to: tempString size)! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 10:58'!(Self)printOn: (Stream)aStream showingDecimalPlaces: (Integer)placesDesired	"Same as super, but provides a faster implementation because fraction part and rounding are trivial."		self printOn: aStream base: 10.	placesDesired <= 0		ifFalse:			[aStream nextPut: $..			0 printOn: aStream base: 10 length: placesDesired padded: true].! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 11:03'!(String) printPaddedWith: (Character)aCharacter to: (Integer)anInteger 	"Answer the string containing the ASCII representation of the receiver 	padded on the left with aCharacter to be at least anInteger characters."	#Numeric.	"2000/03/04  Harmon R. Added Date and Time support"	^ self		printPaddedWith: aCharacter		to: anInteger		base: 10! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 11:01'!(String) printPaddedWith: (Character)aCharacter to: (Integer)anInteger base: (Integer)aRadix 	"Answer the string containing the ASCII representation of the receiver 	padded on the left with aCharacter to be at least anInteger characters."	| (Stream)aStream (Integer)padding (String)digits |	#Numeric.	"2000/03/04  Harmon R. Added Date and Time support"	aStream := (String new: 10) writeStream.	self		printOn: aStream		base: aRadix		showRadix: false.	digits := aStream contents.	padding := anInteger - digits size.	padding > 0 ifFalse: [^ digits].	^ ((String new: padding) atAllPut: aCharacter;	 yourself) , digits! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 11:01'!(String) printString	"For Integer, prefer the stream version to the string version for efficiency"		^String streamContents: [:(Stream)str | self printOn: str base: 10]! !!Integer methodsFor: 'printing' stamp: 'EstebanAllende 2/25/2012 11:03'!(String) printStringRadix: (Integer)baseInteger 	"Return a string containing a sequence of characters that represents the 	numeric value of the receiver in the radix specified by the argument.  	If the receiver is negative, a minus sign ('-') is prepended to the 	sequence of characters. 	The result is undefined if baseInteger less than 2 or greater than 36."	| (String)tempString |	#Numeric.	"2000/03/04  Harmon R. Added ANSI <integer> protocol"	baseInteger = 10		ifTrue: 			[tempString := self storeStringBase: baseInteger.			self negative				ifTrue: [^ '-10r' , (tempString copyFrom: 2 to: tempString size)]				ifFalse: [^ '10r' , tempString]].	^ self storeStringBase: baseInteger! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:05'!(Self) printOn: (Stream)aStream base: (Integer)base length: (Integer)minimum padded: (Boolean)zeroFlag	| (String)prefix |	prefix := self negative ifTrue: ['-'] ifFalse: [String new].	self print: (self abs printStringBase: base) on: aStream prefix: prefix length: minimum padded: zeroFlag! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:05'!(Self) printOn: (Stream)aStream base: (Integer)b nDigits: (Integer)n 	"Append a representation of this number in base b on aStream using nDigits.	self must be positive."	^self subclassResponsibility! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:07'!(String) printStringBase: (Integer)base length: (Integer)minimum padded: (Boolean)zeroFlag	^String streamContents: [:(Stream)s| self printOn: s base: base length: minimum padded: zeroFlag]! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:07'!(String) printStringHex	"returns the hex digit part of the integer when printed in hexadecimal format.	30 printStringHex 		'1E'	30 hex		 '16r1E' "			^self printStringBase: 16! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:07'!(String) printStringLength: (Integer)minimal	^self printStringLength: minimal padded: false! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:07'!(String) printStringLength: (Integer)minimal padded: (Boolean)zeroFlag	^self printStringBase: 10 length: minimal padded: zeroFlag! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:08'!(String) printStringPadded: (Integer)minimal	^self printStringLength: minimal padded: true! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:08'!(String) printStringRoman	| (Stream)stream (Integer)integer |	stream := String new writeStream.	integer := self negative ifTrue: [stream nextPut: $-. self negated] ifFalse: [self].	integer // 1000 timesRepeat: [stream nextPut: $M].	integer		romanDigits: 'MDC' for: 100 on: stream;		romanDigits: 'CLX' for: 10 on: stream;		romanDigits: 'XVI' for: 1 on: stream.	^stream contents! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:09'!(String) radix: (Integer)base 	^ self printStringBase: base! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:09'!(Self) storeOn: (Stream)aStream base: (Integer)base	"Print a representation of the receiver on the stream	<aStream> in base <base> where	2 <= <baseInteger> <= 16. If <base> is other than 10	it is written first separated by $r followed by the number	like for example: 16rFCE2"	| (Integer)integer |	integer := self negative		ifTrue: [aStream nextPut: $-. self negated]		ifFalse: [self].	base = 10 ifFalse: [aStream nextPutAll: base printString; nextPut: $r].	aStream nextPutAll: (integer printStringBase: base).! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:10'!(Self) storeOn: (Stream)aStream base: (Integer)base length: (Integer)minimum padded: (Boolean)zeroFlag	| (String)prefix |	prefix := self negative ifTrue: ['-'] ifFalse: [String new].	base = 10 ifFalse: [prefix := prefix, base printString, 'r'].	self print: (self abs printStringBase: base) on: aStream prefix: prefix length: minimum padded: zeroFlag! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:11'!(String) storeStringBase: (Integer)base length: (Integer)minimum padded: (Boolean)zeroFlag	^String streamContents: [:(Stream)s| self storeOn: s base: base length: minimum padded: zeroFlag]! !!Integer methodsFor: 'printing-numerative' stamp: 'EstebanAllende 2/25/2012 11:12'!(String) storeStringHex	^self storeStringBase: 16! !!Integer methodsFor: 'system primitives' stamp: 'EstebanAllende 2/25/2012 11:35'!(SmallInteger) digitAt: (Integer) index	^ self subclassResponsibility! !!Integer methodsFor: 'system primitives' stamp: 'EstebanAllende 2/25/2012 11:16'!(Integer) digitAt: (Integer) index put: (Integer) value	^ self subclassResponsibility! !!Integer methodsFor: 'system primitives' stamp: 'EstebanAllende 2/25/2012 01:40'!(Integer) digitLength	^ self subclassResponsibility! !!Integer methodsFor: 'system primitives' stamp: 'EstebanAllende 2/25/2012 11:36'!(SmallInteger) lastDigit	"Answer the last digit of the integer base 256.  LargePositiveInteger uses bytes of base two number, and each is a 'digit'."	^self digitAt: self digitLength! !!Integer methodsFor: 'system primitives' stamp: 'EstebanAllende 2/25/2012 11:16'!(Self) replaceFrom: (Integer)start to: (Integer)stop with: (Integer)replacement startingAt: (Integer)repStart	| (Integer)j |  "Catches failure if LgInt replace primitive fails"	j := repStart.	start to: stop do:		[:(Integer)i |		self digitAt: i put: (replacement digitAt: j).		j := j+1]! !!Integer methodsFor: 'testing' stamp: 'EstebanAllende 2/25/2012 11:16'!(Boolean) even 	"Refer to the comment in Number|even."	^((self digitAt: 1) bitAnd: 1) = 0! !!Integer methodsFor: 'testing' stamp: 'EstebanAllende 2/25/2012 11:17'!(Boolean) isFraction	"Each Integer is considered as a special kind of Fraction with self as numerator and a unit denominator.	Rationale: A Fraction with a unit denominator will be automatically reduced to an Integer.	Hence Integer has to be polymorphic to Fraction."	^true! !!Integer methodsFor: 'testing' stamp: 'EstebanAllende 2/25/2012 11:17'!(Boolean) isInteger	"True for all subclasses of Integer."	^ true! !!Integer methodsFor: 'testing' stamp: 'EstebanAllende 2/25/2012 11:18'!(Boolean) isMostLikelyPrime	"See isProbablyPrimeWithK:andQ: for the algoritm description."	| (Integer)k (Integer)q |	self <= 1 ifTrue: [^self error: 'operation undefined'].	self even ifTrue: [^self = 2].	k := 1.	q := self - 1 bitShift: -1.	[q odd] whileFalse: 			[q := q bitShift: -1.			k := k + 1].		25 timesRepeat: [(self isProbablyPrimeWithK: k andQ: q) ifFalse: [^false]].	^true! !!Integer methodsFor: 'testing' stamp: 'EstebanAllende 2/25/2012 11:18'!(Boolean) isPowerOfTwo	"Return true if the receiver is an integral power of two."	^ self ~= 0 and: [(self bitAnd: self-1) = 0]! !!Integer methodsFor: 'testing' stamp: 'EstebanAllende 2/25/2012 20:06'!(Boolean) isPrime	 "Answer true if the receiver is a prime number. See isProbablyPrime for a probabilistic	implementation that is much faster for large integers, and that is correct to an extremely	high statistical level of confidence (effectively deterministic)."		self <= 1 ifTrue: [ ^false ].	self even ifTrue: [ ^self = 2].	3 to: self sqrtFloor by: 2 do: [ :(Integer)each |		self \\ each = 0 ifTrue: [ ^false ] ].	^true! !!Integer methodsFor: 'testing' stamp: 'EstebanAllende 2/25/2012 11:23'!(Boolean) isProbablyPrime	"See isProbablyPrimeWithK:andQ: for the algoritm description."		| (Integer)k (Integer)q |	self <= 1 ifTrue: [ ^false ].	self even ifTrue: [ ^self = 2 ].	k := 1.	q := self - 1 bitShift: -1.	[ q odd ] whileFalse: [		q := q bitShift: -1.		k := k + 1 ].	25 timesRepeat: [ (self isProbablyPrimeWithK: k andQ: q) ifFalse: [ ^false ] ].	^true! !!Integer methodsFor: 'testing' stamp: 'EstebanAllende 2/25/2012 11:23'!(Boolean) isProbablyPrimeWithK: (Integer)k andQ: (Integer)q 	"Algorithm P, probabilistic primality test, from	Knuth, Donald E. 'The Art of Computer Programming', Vol 2,	Third Edition, section 4.5.4, page 395, P1-P5 refer to Knuth description."	"P1"	| (Integer)x (Integer)j (Integer)y |	x := (self - 2) atRandom + 1.	"P2"	j := 0.	y := x raisedToInteger: q modulo: self.	"P3"		[(((j = 0) & (y = 1)) | (y = (self - 1))) ifTrue: [^true].	((j > 0) & (y = 1)) ifTrue: [^false].	"P5"	true]  			whileTrue: 				[j := j + 1.				(j < k) ifTrue: [y := (<Integer>y squared \\ self)]				ifFalse:[^ false]].	^false! !!Integer methodsFor: 'testing' stamp: 'EstebanAllende 2/25/2012 11:24'!(Integer) sqrtFloor	"Return the integer part of the square root of self"	| (Integer)guess (Integer)guessSquared (Integer)delta |	guess := 1 bitShift: self highBit + 1 // 2.	[		guessSquared := guess * guess.		delta := guessSquared - self // (guess bitShift: 1).		delta = 0 ] whileFalse: [			guess := guess - delta ].	guessSquared = self ifFalse: [ guess := guess - 1 ].	^guess! !!Integer methodsFor: 'truncation and round off' stamp: 'EstebanAllende 2/25/2012 11:25'!(Integer) asLargerPowerOfTwo	"Convert the receiver into a power of two which is not less than the receiver"	^self isPowerOfTwo		ifTrue:[self]		ifFalse:[self > 0 ifTrue: [	1 bitShift: (self highBit)]						ifFalse: [DomainError signal: 'Value outside (0 , infinity)' from: 0]]! !!Integer methodsFor: 'truncation and round off' stamp: 'EstebanAllende 2/25/2012 11:25'!(Integer) asPowerOfTwo	"Convert the receiver into a power of two"	^self asSmallerPowerOfTwo! !!Integer methodsFor: 'truncation and round off' stamp: 'EstebanAllende 2/25/2012 11:25'!(Integer) asSmallerPowerOfTwo	"Convert the receiver into a power of two which is not larger than the receiver"	^self isPowerOfTwo		ifTrue:[self]		ifFalse:[self > 0 ifTrue: [	1 bitShift: (self highBit - 1)]						ifFalse: [DomainError signal: 'Value outside (0 , infinity)' from: 0]]! !!Integer methodsFor: 'truncation and round off' stamp: 'EstebanAllende 2/25/2012 11:26'!(Integer) atRandom	"Answer a random integer from 1 to self.  This implementation uses a	shared generator. Heavy users should their own implementation or use	Interval>atRandom: directly."	self = 0 ifTrue: [ ^0 ].	self < 0 ifTrue: [ ^self negated atRandom negated ].	^Collection mutexForPicking critical: [		self atRandom: Collection randomForPicking ]! !!Integer methodsFor: 'truncation and round off' stamp: 'EstebanAllende 2/25/2012 11:26'!(Integer)atRandom: (Random)aGenerator	"Answer a random integer from 1 to self picked from aGenerator."	^ aGenerator nextInt: self! !!Integer methodsFor: 'truncation and round off' stamp: 'EstebanAllende 2/25/2012 11:27'!(Integer) ceiling 	"Refer to the comment in Number|ceiling."! !!Integer methodsFor: 'truncation and round off' stamp: 'EstebanAllende 2/25/2012 11:27'!(Integer) floor 	"Refer to the comment in Number|floor."! !!Integer methodsFor: 'truncation and round off' stamp: 'EstebanAllende 2/25/2012 11:27'!(Integer) normalize 	"SmallInts OK; LgInts override"	^ self! !!Integer methodsFor: 'truncation and round off' stamp: 'EstebanAllende 2/25/2012 11:27'!(Integer) rounded 	"Refer to the comment in Number|rounded."! !!Integer methodsFor: 'truncation and round off' stamp: 'EstebanAllende 2/25/2012 11:27'!(Integer) truncated 	"Refer to the comment in Number|truncated."! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 11:29'!(Integer) copyto: (Integer)x	| (Integer)stop |	stop := self digitLength min: x digitLength.	^ x replaceFrom: 1 to: stop with: self startingAt: 1! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 11:31'!(Integer) digitAdd: (Integer)arg 	| (Integer)len (Integer)arglen (Integer)accum (Integer)sum |	<primitive: 'primDigitAdd' module:'LargeIntegers'>	accum := 0.	(len := self digitLength) < (arglen := arg digitLength) ifTrue: [len := arglen].	"Open code max: for speed"	sum := Integer new: len neg: self negative.	1 to: len do: 		[:(Integer)i | 		accum := (accum bitShift: -8)					+ (self digitAt: i) + (arg digitAt: i).		sum digitAt: i put: (accum bitAnd: 255)].	accum > 255		ifTrue: 			[sum := sum growby: 1.			sum at: sum digitLength put: (accum bitShift: -8)].	^ sum! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 11:32'!(Integer) digitCompare: (Integer)arg 	"Compare the magnitude of self with that of arg.   	Return a code of 1, 0, -1 for self >, = , < arg"	| (Integer)len (Integer)arglen (Integer)argDigit (Integer)selfDigit |	<primitive: 'primDigitCompare' module:'LargeIntegers'>	len := self digitLength.	(arglen := arg digitLength) ~= len		ifTrue: [arglen > len				ifTrue: [^ -1]				ifFalse: [^ 1]].	[len > 0]		whileTrue: 			[(argDigit := arg digitAt: len) ~= (selfDigit := self digitAt: len)				ifTrue: [argDigit < selfDigit						ifTrue: [^ 1]						ifFalse: [^ -1]].			len := len - 1].	^ 0! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 20:09'!(Array) digitDiv: (Integer)arg neg: (Boolean)ng 	"Answer with an array of (quotient, remainder)."	| (Integer)quo (Integer)rem (Integer)ql (Integer)d (Integer)div (Integer)dh (Integer)dnh (Integer)dl (Integer)qhi (Integer)qlo (Integer)j (Integer)l (Integer)hi (Integer)lo 	(Integer)r3 (Integer)a (Integer)t |	<primitive: 'primDigitDivNegative' module:'LargeIntegers'>	arg = 0 ifTrue: [^ (ZeroDivide dividend: self) signal].	"TFEI added this line"	l := self digitLength - arg digitLength + 1.	l <= 0 ifTrue: [^ Array with: 0 with: self].	"shortcut against #highBit"	d := 8 - arg lastDigit highBitOfPositiveReceiver.	div := arg digitLshift: d.	div := div growto: div digitLength + 1.	"shifts so high order word is >=128"	rem := self digitLshift: d.	rem digitLength = self digitLength ifTrue: [rem := rem growto: self digitLength + 1].	"makes a copy and shifts"	quo := Integer new: l neg: ng.	dl := div digitLength - 1.	"Last actual byte of data"	ql := l.	dh := div digitAt: dl.	dnh := dl = 1				ifTrue: [0]				ifFalse: [div digitAt: dl - 1].	1 to: ql do: 		[:(Integer)k | 		"maintain quo*arg+rem=self"		"Estimate rem/div by dividing the leading to bytes of rem by dh."		"The estimate is q = qhi*16+qlo, where qhi and qlo are nibbles."		j := rem digitLength + 1 - k.		"r1 := rem digitAt: j."		(rem digitAt: j)			= dh			ifTrue: [qhi := qlo := 15				"i.e. q=255"]			ifFalse: 				["Compute q = (r1,r2)//dh, t = (r1,r2)\\dh.  				Note that r1,r2 are bytes, not nibbles.  				Be careful not to generate intermediate results exceeding 13  				bits."				"r2 := (rem digitAt: j - 1)."				t := ((rem digitAt: j)							bitShift: 4)							+ ((rem digitAt: j - 1)									bitShift: -4).				qhi := t // dh.				t := ((<Integer>t \\ dh) bitShift: 4)							+ ((rem digitAt: j - 1)									bitAnd: 15).				qlo := t // dh.				t := (<Integer>t \\ dh).				"Next compute (hi,lo) := q*dnh"				hi := qhi * dnh.				lo := qlo * dnh + ((hi bitAnd: 15)								bitShift: 4).				hi := (hi bitShift: -4)							+ (lo bitShift: -8).				lo := lo bitAnd: 255.				"Correct overestimate of q.  				Max of 2 iterations through loop -- see Knuth vol. 2"				r3 := j < 3							ifTrue: [0]							ifFalse: [rem digitAt: j - 2].				[(t < hi					or: [t = hi and: [r3 < lo]])					and: 						["i.e. (t,r3) < (hi,lo)"						qlo := qlo - 1.						lo := lo - dnh.						lo < 0							ifTrue: 								[hi := hi - 1.								lo := lo + 256].						hi >= dh]]					whileTrue: [hi := hi - dh].				qlo < 0					ifTrue: 						[qhi := qhi - 1.						qlo := qlo + 16]].		"Subtract q*div from rem"		l := j - dl.		a := 0.		1 to: div digitLength do: 			[:(Integer)i | 			hi := (div digitAt: i)						* qhi.			lo := a + (rem digitAt: l) - ((hi bitAnd: 15)							bitShift: 4) - ((div digitAt: i)							* qlo).			rem digitAt: l put: lo - (lo // 256 * 256).			"sign-tolerant form of (lo bitAnd: 255)"			a := lo // 256 - (hi bitShift: -4).			l := l + 1].		a < 0			ifTrue: 				["Add div back into rem, decrease q by 1"				qlo := qlo - 1.				l := j - dl.				a := 0.				1 to: div digitLength do: 					[:(Integer)i | 					a := (a bitShift: -8)								+ (rem digitAt: l) + (div digitAt: i).					rem digitAt: l put: (a bitAnd: 255).					l := l + 1]].		quo digitAt: quo digitLength + 1 - k put: (qhi bitShift: 4)				+ qlo].	rem := rem				digitRshift: d				bytes: 0				lookfirst: dl.	^ Array with: quo with: rem! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 12:01'!(Integer) digitLogic: (Integer)arg op: (Symbol)op length: (Integer)len 	| (Integer)i (Integer)result (Boolean)neg1 (Boolean)neg2 (Boolean)rneg (Boolean)z1 (Boolean)z2 (Boolean)rz (Integer)b1 (Integer)b2 (Integer)b |	neg1 := self negative.	neg2 := arg negative.	rneg := ((neg1				ifTrue: [-1]				ifFalse: [0])				perform: op				with: (neg2						ifTrue: [-1]						ifFalse: [0]))				< 0.	result := Integer new: len neg: rneg.	rz := z1 := z2 := true.	i := 0.	[(i := i + 1) <= len		or: ["mind a carry on result that might go past len digits"			rneg and: [rz				and: [result := result growby: 1.					true]]]]		whileTrue: [b1 := self digitAt: i.			neg1				ifTrue: [b1 := z1								ifTrue: [b1 = 0										ifTrue: [0]										ifFalse: [z1 := false.											256 - b1]]								ifFalse: [255 - b1]].			b2 := arg digitAt: i.			neg2				ifTrue: [b2 := z2								ifTrue: [b2 = 0										ifTrue: [0]										ifFalse: [z2 := false.											256 - b2]]								ifFalse: [255 - b2]].			b := b1 perform: op with: b2.			result				digitAt: i				put: (rneg						ifTrue: [rz								ifTrue: [b = 0										ifTrue: [0]										ifFalse: [rz := false.											256 - b]]								ifFalse: [255 - b]]						ifFalse: [b])].	^ result normalize! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 12:04'!(Integer) digitLshift: (Integer)shiftCount 	| (Integer)carry (Integer)rShift (Integer)mask (Integer)len (Integer)result (Integer)digit (Integer)byteShift (Integer)bitShift (Integer)highBit |	(highBit := self highBitOfMagnitude) = 0 ifTrue: [^ 0].	len := highBit + shiftCount + 7 // 8.	result := Integer new: len neg: self negative.	byteShift := shiftCount // 8.	bitShift := (<Integer>shiftCount \\ 8).	bitShift = 0 ifTrue: ["Fast version for byte-aligned shifts"		^ result			replaceFrom: byteShift + 1			to: len			with: self			startingAt: 1].	carry := 0.	rShift := bitShift - 8.	mask := 255 bitShift: 0 - bitShift.	1 to: byteShift do: [:(Integer)i | result digitAt: i put: 0].	1 to: len - byteShift do: 		[:(Integer)i | 		digit := self digitAt: i.		result digitAt: i + byteShift put: (((digit bitAnd: mask)				bitShift: bitShift)				bitOr: carry).		carry := digit bitShift: rShift].	^ result! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 20:09'!(Integer) digitMultiply: (Integer)arg neg: (Boolean)ng 	| (Integer)prod (Integer)prodLen (Integer)carry (Integer)digit (Integer)k (Integer)ab |	<primitive: 'primDigitMultiplyNegative' module:'LargeIntegers'>	(arg digitLength = 1 and: [(arg digitAt: 1)			= 0])		ifTrue: [^ 0].	(self digitLength = 1 and: [(self digitAt: 1)			= 0])		ifTrue: [^ 0].	prodLen := self digitLength + arg digitLength.	prod := Integer new: prodLen neg: ng.	"prod starts out all zero"	1 to: self digitLength do: [:(Integer)i | (digit := self digitAt: i) ~= 0			ifTrue: 				[k := i.				carry := 0.				"Loop invariant: 0<=carry<=0377, k=i+j-1"				1 to: arg digitLength do: 					[:(Integer)j | 					ab := (arg digitAt: j)								* digit + carry + (prod digitAt: k).					carry := ab bitShift: -8.					prod digitAt: k put: (ab bitAnd: 255).					k := k + 1].				prod digitAt: k put: carry]].	^ prod normalize! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 14:08'!(Integer)digitRshift: (Integer)anInteger bytes: (Integer)b lookfirst: (Integer)a 	 "Shift right 8*b+anInteger bits, 0<=n<8.	Discard all digits beyond a, and all zeroes at or below a."	| (Integer)n (Integer)x (Integer)r (Integer)f (Integer)m (Integer)digit (Integer)count (Integer)i |	n := 0 - anInteger.	x := 0.	f := n + 8.	i := a.	m := 255 bitShift: 0 - f.	digit := self digitAt: i.	[((digit bitShift: n) bitOr: x) = 0 and: [i ~= 1]] whileTrue:		[x := digit bitShift: f "Can't exceed 8 bits".		i := i - 1.		digit := self digitAt: i].	i <= b ifTrue: [^Integer new: 0 neg: self negative].  "All bits lost"	r := Integer new: i - b neg: self negative.	count := i.	x := (self digitAt: b + 1) bitShift: n.	b + 1 to: count do:		[:(Integer)j | digit := self digitAt: j + 1.		r digitAt: j - b put: (((digit bitAnd: m) bitShift: f) bitOr: x) 			"Avoid values > 8 bits".		x := digit bitShift: n].	^r! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 14:12'!(Integer) digitSubtract: (Integer)arg 	| (Integer)smaller (Integer)larger (Integer)z (Integer)sum (Integer)sl (Integer)al (Boolean)ng |	<primitive: 'primDigitSubtract' module:'LargeIntegers'>	sl := self digitLength.	al := arg digitLength.	(sl = al		ifTrue: 			[[(self digitAt: sl)				= (arg digitAt: sl) and: [sl > 1]]				whileTrue: [sl := sl - 1].			al := sl.			(self digitAt: sl)				< (arg digitAt: sl)]		ifFalse: [sl < al])		ifTrue: 			[larger := arg.			smaller := self.			ng := self negative == false.			sl := al]		ifFalse: 			[larger := self.			smaller := arg.			ng := self negative].	sum := Integer new: sl neg: ng.	z := 0.	"Loop invariant is -1<=z<=1"	1 to: sl do: 		[:(Integer)i | 		z := z + (larger digitAt: i) - (smaller digitAt: i).		sum digitAt: i put: z - (z // 256 * 256).		"sign-tolerant form of (z bitAnd: 255)"		z := z // 256].	^ sum normalize! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 14:13'!(Integer) growby: (Integer)n	^self growto: self digitLength + n! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/27/2012 22:02'!(Integer) growto: (Integer)n	^self copyto: ((<Self class>self species) new: n)! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 14:15'!(Self) print: (String)positiveNumberString on: (Stream)aStream prefix: (String)prefix length: (Integer)minimum padded: (Boolean)zeroFlag	| (Integer)padLength |	padLength := minimum - positiveNumberString size - prefix size.	padLength > 0		ifTrue: [zeroFlag				ifTrue: [aStream nextPutAll: prefix; nextPutAll: (String new: padLength withAll: $0)]				ifFalse: [aStream nextPutAll: (String new: padLength withAll: Character space); nextPutAll: prefix]]		ifFalse: [aStream nextPutAll: prefix].	aStream nextPutAll: positiveNumberString	! !!Integer methodsFor: 'private' stamp: 'EstebanAllende 2/25/2012 14:18'!(Self) romanDigits: (String)digits for: (Integer)base on: (Stream)aStream	| (Integer)n |	n := (<Integer>self \\ (base * 10) // base).	n = 9 ifTrue: [^ aStream nextPut: digits last; nextPut: digits first].	n = 4 ifTrue: [^ aStream nextPut: digits last; nextPut: digits second].	n > 4 ifTrue: [aStream nextPut: digits second].	(<Integer>n \\ 5) timesRepeat: [aStream nextPut: digits last]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Integer class	uses: TTyped classTrait	instanceVariableNames: ''!!Integer class methodsFor: 'class initialization' stamp: 'ar 11/30/2009 22:01'!initialize	"Integer initialize"	"Ensure we have the right compact class index"	"LPI has been a compact class forever - just ensure basic correctness"	(LargePositiveInteger indexIfCompact = 5) ifFalse:[		(Smalltalk compactClassesArray at: 5)			ifNil:[LargePositiveInteger becomeCompactSimplyAt: 5]			ifNotNil:[self error: 'Unexpected compact class setup']].	"Cog requires LNI to be compact at 4 (replacing PseudoContext)"	(LargeNegativeInteger indexIfCompact = 4) ifFalse:[		"PseudoContext will likely get removed at some point so write this test		without introducing a hard dependency"		(Smalltalk compactClassesArray at: 4) name == #PseudoContext			ifTrue:[Smalltalk compactClassesArray at: 4 put: nil].		(Smalltalk compactClassesArray at: 4)			ifNil:[LargeNegativeInteger becomeCompactSimplyAt: 4]			ifNotNil:[self error: 'Unexpected compact class setup']].! !!Integer class methodsFor: 'compatibility' stamp: 'laza 10/16/2004 14:34'!readFrom: aStream radix: radix	^self readFrom: aStream base: radix! !!Integer class methodsFor: 'instance creation' stamp: 'tk 4/20/1999 14:18'!basicNew	self == Integer ifTrue: [		^ self error: 'Integer is an abstract class.  Make a concrete subclass.'].	^ super basicNew! !!Integer class methodsFor: 'instance creation' stamp: 'bf 2/2/2004 00:23'!byte1: byte1 byte2: byte2 byte3: byte3 byte4: byte4 	"Depending on high-order byte copy directly into a LargeInteger,	or build up a SmallInteger by shifting"	| value |	byte4 < 16r40 ifTrue:		[^ (byte4 bitShift: 24)		 + (byte3 bitShift: 16)		 + (byte2 bitShift: 8)		 + byte1].	value := LargePositiveInteger new: 4.	value digitAt: 4 put: byte4.	value digitAt: 3 put: byte3.	value digitAt: 2 put: byte2.	value digitAt: 1 put: byte1.	^ value! !!Integer class methodsFor: 'instance creation' stamp: 'tk 4/18/1999 22:01'!new	self == Integer ifTrue: [		^ self error: 'Integer is an abstract class.  Make a concrete subclass.'].	^ super new! !!Integer class methodsFor: 'instance creation'!new: length neg: neg	"Answer an instance of a large integer whose size is length. neg is a flag 	determining whether the integer is negative or not."	neg 		ifTrue: [^LargeNegativeInteger new: length]		ifFalse: [^LargePositiveInteger new: length]! !!Integer class methodsFor: 'instance creation' stamp: 'nice 3/15/2008 00:36'!readFrom: aStringOrStream 	"Answer a new Integer as described on the stream, aStream.	Embedded radix specifiers not allowed - use Number readFrom: for that."	^self readFrom: aStringOrStream base: 10! !!Integer class methodsFor: 'instance creation' stamp: 'GuillermoPolito 8/24/2010 18:48'!readFrom: aStringOrStream base: base 	"Answer an instance of one of the concrete subclasses if Integer. 	Initial minus sign accepted, and bases > 10 use letters A-Z.	Imbedded radix specifiers not allowed;  use Number 	class readFrom: for that.	Raise an Error if there are no digits.	If stringOrStream dos not start with a valid number description, answer 0 for backward compatibility. This is not clever and should better be changed."	^(SqNumberParser on: aStringOrStream) nextIntegerBase: base! !!Integer class methodsFor: 'instance creation' stamp: 'nice 3/15/2008 01:09'!readFrom: aStringOrStream ifFail: aBlock	"Answer an instance of one of the concrete subclasses if Integer. 	Initial minus sign accepted.	Imbedded radix specifiers not allowed;  use Number 	class readFrom: for that.	Execute aBlock if there are no digits."	^(SqNumberParser on: aStringOrStream) nextIntegerBase: 10 ifFail: aBlock! !!Integer class methodsFor: 'prime numbers' stamp: 'ar 10/6/2001 19:34'!largePrimesUpTo: maxValue	"Compute and return all the prime numbers up to maxValue"	^Array streamContents:[:s| self largePrimesUpTo: maxValue do:[:prime| s nextPut: prime]]! !!Integer class methodsFor: 'prime numbers' stamp: 'ar 10/6/2001 02:38'!largePrimesUpTo: max do: aBlock	"Evaluate aBlock with all primes up to maxValue.	The Algorithm is adapted from http://www.rsok.com/~jrm/printprimes.html	It encodes prime numbers much more compactly than #primesUpTo: 	38.5 integer per byte (2310 numbers per 60 byte) allow for some fun large primes.	(all primes up to SmallInteger maxVal can be computed within ~27MB of memory;	the regular #primesUpTo: would require 4 *GIGA*bytes).	Note: The algorithm could be re-written to produce the first primes (which require	the longest time to sieve) faster but only at the cost of clarity."	| limit flags maskBitIndex bitIndex maskBit byteIndex index primesUpTo2310 indexLimit |	limit := max asInteger - 1.	indexLimit := max sqrt truncated + 1.	"Create the array of flags."	flags := ByteArray new: (limit + 2309) // 2310 * 60 + 60.	flags atAllPut: 16rFF. "set all to true"	"Compute the primes up to 2310"	primesUpTo2310 := self primesUpTo: 2310.	"Create a mapping from 2310 integers to 480 bits (60 byte)"	maskBitIndex := Array new: 2310.	bitIndex := -1. "for pre-increment"	maskBitIndex at: 1 put: (bitIndex := bitIndex + 1).	maskBitIndex at: 2 put: (bitIndex := bitIndex + 1).	1 to: 5 do:[:i| aBlock value: (primesUpTo2310 at: i)].	index := 6.	2 to: 2309 do:[:n|		[(primesUpTo2310 at: index) < n] 			whileTrue:[index := index + 1].		n = (primesUpTo2310 at: index) ifTrue:[			maskBitIndex at: n+1 put: (bitIndex := bitIndex + 1).		] ifFalse:[			"if modulo any of the prime factors of 2310, then could not be prime"			(n \\ 2 = 0 or:[n \\ 3 = 0 or:[n \\ 5 = 0 or:[n \\ 7 = 0 or:[n \\ 11 = 0]]]]) 				ifTrue:[maskBitIndex at: n+1 put: 0]				ifFalse:[maskBitIndex at: n+1 put: (bitIndex := bitIndex + 1)].		].	].	"Now the real work begins...	Start with 13 since multiples of 2,3,5,7,11 are handled by the storage method;	increment by 2 for odd numbers only."	13 to: limit by: 2 do:[:n|		(maskBit := maskBitIndex at: (n \\ 2310 + 1)) = 0 ifFalse:["not a multiple of 2,3,5,7,11"			byteIndex := n // 2310 * 60 + (maskBit-1 bitShift: -3) + 1.			bitIndex := 1 bitShift: (maskBit bitAnd: 7).			((flags at: byteIndex) bitAnd: bitIndex) = 0 ifFalse:["not marked -- n is prime"				aBlock value: n.				"Start with n*n since any integer < n has already been sieved 				(e.g., any multiple of n with a number k < n has been cleared 				when k was sieved); add 2 * i to avoid even numbers and				mark all multiples of this prime. Note: n < indexLimit below				limits running into LargeInts -- nothing more."				n < indexLimit ifTrue:[					index := n * n.					(index bitAnd: 1) = 0 ifTrue:[index := index + n].					[index <= limit] whileTrue:[						(maskBit := maskBitIndex at: (index \\ 2310 + 1)) = 0 ifFalse:[							byteIndex := (index // 2310 * 60) + (maskBit-1 bitShift: -3) + 1.							maskBit := 255 - (1 bitShift: (maskBit bitAnd: 7)).							flags at: byteIndex put: ((flags at: byteIndex) bitAnd: maskBit).						].						index := index + (2 * n)].				].			].		].	].! !!Integer class methodsFor: 'prime numbers' stamp: 'ar 10/6/2001 19:33'!primesUpTo: max	"Return a list of prime integers up to the given integer."	"Integer primesUpTo: 100"	^Array streamContents:[:s| self primesUpTo: max do:[:prime| s nextPut: prime]]! !!Integer class methodsFor: 'prime numbers' stamp: 'md 2/13/2006 14:38'!primesUpTo: max do: aBlock	"Compute aBlock with all prime integers up to the given integer."	"Integer primesUpTo: 100"	| limit flags prime k |	limit := max asInteger - 1.	"Fall back into #largePrimesUpTo:do: if we'd require more than 100k of memory; 	the alternative will only requre 1/154th of the amount we need here and is almost as fast."	limit > 25000 ifTrue:[^self largePrimesUpTo: max do: aBlock].	flags := (Array new: limit) atAllPut: true.	1 to: limit - 1 do: [:i |		(flags at: i) ifTrue: [			prime := i + 1.			k := i + prime.			[k <= limit] whileTrue: [				flags at: k put: false.				k := k + prime].			aBlock value: prime]].! !!Integer class methodsFor: 'prime numbers' stamp: 'ar 10/6/2001 19:33'!verbosePrimesUpTo: max	"Integer verbosePrimesUpTo: SmallInteger maxVal" "<- heh, heh"	"Compute primes up to max, but be verbose about it"	^Array streamContents:[:s| self verbosePrimesUpTo: max do:[:prime| s nextPut: prime]].! !!Integer class methodsFor: 'prime numbers' stamp: 'nice 1/5/2010 15:59'!verbosePrimesUpTo: max do: aBlock 	"Integer verbosePrimesUpTo: SmallInteger maxVal"	"<- heh, heh"	"Compute primes up to max, but be verbose about it"	| lastTime |	lastTime := Time millisecondClockValue.	UIManager default informUserDuring: 		[ :bar | 		bar value: 'Computing primes...'.		self 			primesUpTo: max			do: 				[ :prime | | nowTime | 				aBlock value: prime.				nowTime := Time millisecondClockValue.				nowTime - lastTime > 1000 ifTrue: 					[ lastTime := nowTime.					bar value: 'Last prime found: ' , prime printString ] ] ]! !Integer initialize!