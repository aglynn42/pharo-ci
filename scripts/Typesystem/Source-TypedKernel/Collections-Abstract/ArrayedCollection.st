'From Pharo1.4a of ''16 June 2011'' [Latest update: #14301] on 29 February 2012 at 12:53:54 am'!SequenceableCollection subclass: #ArrayedCollection	uses: TSortable + TTyped	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Abstract'!!ArrayedCollection commentStamp: '<historical>' prior: 0!I am an abstract collection of elements with a fixed range of integers (from 1 to n>=0) as external keys.!!ArrayedCollection methodsFor: '*Compression' stamp: 'EstebanAllende 2/29/2012 00:53'!writeOnGZIPByteStream: aStream 	self flag: #DEAD.	"We only intend this for non-pointer arrays.  Do nothing if I contain pointers."	"self class isPointers | self class isWords not ifTrue: [^ super writeOnGZIPByteStream: aStream]."		"super may cause an error, but will not be called."		"aStream nextPutAllWordArray: self"! !!ArrayedCollection methodsFor: 'accessing' stamp: 'EstebanAllende 2/29/2012 00:33'!(Integer) size	"Answer how many elements the receiver contains."	<primitive: 62>	^ self basicSize! !!ArrayedCollection methodsFor: 'adding' stamp: 'EstebanAllende 2/29/2012 00:34'!(Object) add: (Object)newObject	^self shouldNotImplement! !!ArrayedCollection methodsFor: 'objects from disk' stamp: 'EstebanAllende 2/29/2012 00:34'!(Integer) byteSize	^self basicSize * self bytesPerBasicElement! !!ArrayedCollection methodsFor: 'objects from disk' stamp: 'EstebanAllende 2/29/2012 00:34'!(Integer) bytesPerBasicElement	"Answer the number of bytes that each of my basic elements requires.	In other words:		self basicSize * self bytesPerBasicElement	should equal the space required on disk by my variable sized representation."	^self class isBytes ifTrue: [ 1 ] ifFalse: [ 4 ]! !!ArrayedCollection methodsFor: 'objects from disk' stamp: 'EstebanAllende 2/29/2012 00:34'!(Integer) bytesPerElement	^self class isBytes ifTrue: [ 1 ] ifFalse: [ 4 ].! !!ArrayedCollection methodsFor: 'objects from disk' stamp: 'EstebanAllende 2/29/2012 00:35'!(Self) restoreEndianness	"This word object was just read in from a stream.  It was stored in Big Endian (Mac) format.  Reverse the byte order if the current machine is Little Endian.	We only intend this for non-pointer arrays.  Do nothing if I contain pointers."	self class isPointers | self class isWords not ifTrue: [^self].	Smalltalk isLittleEndian 		ifTrue: 			[Bitmap 				swapBytesIn: self				from: 1				to: self basicSize]! !!ArrayedCollection methodsFor: 'objects from disk' stamp: 'EstebanAllende 2/29/2012 00:36'!(Self) swapHalves		"A normal switch in endianness (byte order in words) reverses the order of 4 bytes.  That is not correct for SoundBuffers, which use 2-bytes units.  If a normal switch has be done, this method corrects it further by swapping the two halves of the long word.	This method is only used for 16-bit quanities in SoundBuffer, ShortIntegerArray, etc."	| (Form)hack (BitBlt)blt |	"The implementation is a hack, but fast for large ranges"	hack := Form new hackBits: self.	blt := (BitBlt toForm: hack) sourceForm: hack.	blt combinationRule: Form reverse.  "XOR"	blt sourceY: 0; destY: 0; height: self size; width: 2.	blt sourceX: 0; destX: 2; copyBits.  "Exchange bytes 0&1 with 2&3"	blt sourceX: 2; destX: 0; copyBits.	blt sourceX: 0; destX: 2; copyBits.! !!ArrayedCollection methodsFor: 'objects from disk' stamp: 'EstebanAllende 2/29/2012 00:37'!(Self) writeOn: (PositionableStream)aStream 	"Store the array of bits onto the argument, aStream.  (leading byte ~= 16r80) identifies this as raw bits (uncompressed).  Always store in Big Endian (Mac) byte order.  Do the writing at BitBlt speeds. We only intend this for non-pointer arrays.  Do nothing if I contain pointers."	(self class isPointers or: [ self class isWords not ]) ifTrue: [^ self ].	aStream nextInt32Put: self basicSize.	aStream nextWordsPutAll: self.! !!ArrayedCollection methodsFor: 'printing' stamp: 'EstebanAllende 2/29/2012 00:37'!(Self) storeOn: (WriteStream)aStream	aStream nextPutAll: '(('.	aStream nextPutAll: self class name.	aStream nextPutAll: ' new: '.	aStream store: self size.	aStream nextPut: $).	(self storeElementsFrom: 1 to: self size on: aStream)		ifFalse: [aStream nextPutAll: '; yourself'].	aStream nextPut: $)! !!ArrayedCollection methodsFor: 'removing' stamp: 'EstebanAllende 2/29/2012 00:38'!(Self) removeAll	^self shouldNotImplement! !!ArrayedCollection methodsFor: 'sorting' stamp: 'EstebanAllende 2/29/2012 00:38'!(Boolean) isSorted	"Return true if the receiver is sorted by the given criterion.	Optimization for isSortedBy: [:a :b | a <= b]."	| (?)lastElm (?)elm |	self isEmpty ifTrue: [^ true].	lastElm := self first.	2 to: self size do: 		[:(Integer)index | 		elm := self at: index.		lastElm <= elm ifFalse: [^ false].		lastElm := elm].	^ true! !!ArrayedCollection methodsFor: 'sorting' stamp: 'EstebanAllende 2/29/2012 00:39'!(Boolean) isSortedBy: (? ? → Boolean)aBlock	"Return true if the receiver is sorted by the given criterion."	| (?)lastElm (?)elm |	self isEmpty ifTrue: [^ true].	lastElm := self first.	2 to: self size do: 		[:(Integer)index | 		elm := self at: index.		(aBlock value: lastElm value: elm) ifFalse: [^ false].		lastElm := elm].	^ true! !!ArrayedCollection methodsFor: 'sorting' stamp: 'EstebanAllende 2/29/2012 00:41'!(Self) mergeFirst: (Integer)first middle: (Integer)middle last: (Integer)last into: (SequenceableCollection)dst by: (? ? → Boolean)aBlock	"Private. Merge the sorted ranges [first..middle] and [middle+1..last] 	of the receiver into the range [first..last] of dst."	| (Integer)i1 (Integer)i2 (?)val1 (?)val2 (Integer)out |	i1 := first.	i2 := middle + 1.	val1 := self at: i1.	val2 := self at: i2.	out := first - 1.  "will be pre-incremented"	"select 'lower' half of the elements based on comparator"	[(i1 <= middle) and: [i2 <= last]] whileTrue: [		(aBlock			ifNil: [val1 <= val2]			ifNotNil: [ aBlock value: val1 value: val2])						ifTrue: [dst at: (out := out + 1) put: val1.								val1 := self at: (i1 := i1 + 1)]						ifFalse: [dst at: (out := out + 1) put: val2.								i2 := i2 + 1.								i2 <= last ifTrue: [val2 := self at: i2]]].	"copy the remaining elements"	i1 <= middle		ifTrue: [dst replaceFrom: out + 1 to: last with: self startingAt: i1]		ifFalse: [dst replaceFrom: out + 1 to: last with: self startingAt: i2]! !!ArrayedCollection methodsFor: 'sorting' stamp: 'EstebanAllende 2/29/2012 00:42'!(Self) mergeSortFrom: (Integer)startIndex to: (Integer)stopIndex by: (? ? → Boolean)aBlock	"Sort the given range of indices using the mergesort algorithm.	Mergesort is a worst-case O(N log N) sorting algorithm that usually	does only half as many comparisons as heapsort or quicksort."	"Details: recursively split the range to be sorted into two halves,	mergesort each half, then merge the two halves together. An extra 	copy of the data is used as temporary storage and successive merge 	phases copy data back and forth between the receiver and this copy.	The recursion is set up so that the final merge is performed into the	receiver, resulting in the receiver being completely sorted."	self size <= 1 ifTrue: [^ self].  "nothing to do"	startIndex = stopIndex ifTrue: [^ self].	[startIndex >= 1 and: [startIndex < stopIndex]] assert. "bad start index"	[stopIndex <= self size] assert. "bad stop index"	self		mergeSortFrom: startIndex		to: stopIndex 		src: self shallowCopy 		dst: self 		by: aBlock! !!ArrayedCollection methodsFor: 'sorting' stamp: 'EstebanAllende 2/29/2012 00:42'!(Self) mergeSortFrom: (Integer)first to: (Integer)last src: (SequenceableCollection)src dst: (SequenceableCollection)dst by: (? ? → Boolean)aBlock	"Private. Split the range to be sorted in half, sort each half, and 	merge the two half-ranges into dst."	| (Integer)middle |	first = last ifTrue: [^ self].	middle := (first + last) // 2.	self mergeSortFrom: first to: middle src: dst dst: src by: aBlock.	self mergeSortFrom: middle + 1 to: last src: dst dst: src by: aBlock.	src mergeFirst: first middle: middle last: last into: dst by: aBlock! !!ArrayedCollection methodsFor: 'sorting' stamp: 'EstebanAllende 2/29/2012 00:43'!(Self) sort	"Sort this collection into ascending order using the '<=' operator."	self sort: [:(?)a :(?)b | a <= b]! !!ArrayedCollection methodsFor: 'sorting' stamp: 'EstebanAllende 2/29/2012 00:43'!(Self) sort: (? ? → Boolean)aSortBlock 	"Sort this array using aSortBlock. The block should take two arguments	and return true if the first element should preceed the second one."	self		mergeSortFrom: 1		to: self size		by: aSortBlock! !!ArrayedCollection methodsFor: 'private' stamp: 'EstebanAllende 2/29/2012 00:43'!(?) defaultElement	^nil! !!ArrayedCollection methodsFor: 'private' stamp: 'EstebanAllende 2/29/2012 00:44'!(Self) fillFrom: (Collection)aCollection with: (? → ?)aBlock	"Evaluate aBlock with each of aCollections's elements as the argument.  	Collect the resulting values into self. Answer self."	| index |	index := 0.	aCollection do: [ :(?)each |		self at: (index := index + 1) put: (aBlock value: each) ]! !!ArrayedCollection methodsFor: 'private' stamp: 'EstebanAllende 2/29/2012 00:46'!(Boolean) storeElementsFrom: (Integer)firstIndex to: (Integer)lastIndex on: (WriteStream)aStream	| (Boolean)noneYet (?)defaultElement (?)arrayElement |	noneYet := true.	defaultElement := self defaultElement.	firstIndex to: lastIndex do: 		[:index | 		arrayElement := self at: index.		arrayElement = defaultElement			ifFalse: 				[noneYet					ifTrue: [noneYet := false]					ifFalse: [aStream nextPut: $;].				aStream nextPutAll: ' at: '.				aStream store: index.				aStream nextPutAll: ' put: '.				aStream store: arrayElement]].	^noneYet! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ArrayedCollection class	uses: TSortable classTrait + TTyped classTrait	instanceVariableNames: ''!!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:46'!(Self instance) new	"Answer a new instance of me, with size = 0."	^self new: 0! !!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:46'!(Self instance) new: (Integer)size withAll: (Object)value 	"Answer an instance of me, with number of elements equal to size, each 	of which refers to the argument, value."	^(self new: size) atAllPut: value! !!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:47'!(Self instance) newFrom: (Collection)aCollection 	"Answer an instance of me containing the same elements as aCollection."	| (Self instance)newArray |	newArray := self new: aCollection size.	1 to: aCollection size do: [:(Integer)i | newArray at: i put: (aCollection at: i)].	^ newArray"	Array newFrom: {1. 2. 3}	{1. 2. 3} as: Array	{1. 2. 3} as: ByteArray	{$c. $h. $r} as: String	{$c. $h. $r} as: Text"! !!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:47'!(Self instance) newFromStream: (ReadStream)s	"Only meant for my subclasses that are raw bits and word-like.  For quick unpack form the disk."	| (Integer)len |	(self isPointers not & self isWords) ifFalse: [ 		self error: 'This method is only meant for raw bits and word-like subclasses '].	s next = 16r80 ifTrue:		["A compressed format.  Could copy what BitMap does, or use a 		special sound compression format.  Callers normally compress their own way."		^ self error: 'not implemented'].	s skip: -1.	len := s nextInt32.	^ s nextWordsInto: (self basicNew: len)! !!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:48'!(Self instance) with: (Any)anObject 	"Answer a new instance of me, containing only anObject."	| (Self instance)newCollection |	newCollection := self new: 1.	newCollection at: 1 put: (<Object>anObject).	^newCollection! !!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:48'!(Self instance) with: (Object)firstObject with: (Object)secondObject 	"Answer a new instance of me, containing firstObject and secondObject."	| (Self instance)newCollection |	newCollection := self new: 2.	newCollection at: 1 put: firstObject.	newCollection at: 2 put: secondObject.	^newCollection! !!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:50'!(Self instance) with: (Object)firstObject with: (Object)secondObject with: (Object)thirdObject 	"Answer a new instance of me, containing only the three arguments as	elements."	| (Self instance)newCollection |	newCollection := self new: 3.	newCollection at: 1 put: firstObject.	newCollection at: 2 put: secondObject.	newCollection at: 3 put: thirdObject.	^newCollection! !!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:50'!(Self instance) with: (Object)firstObject with: (Object)secondObject with: (Object)thirdObject with: (Object)fourthObject 	"Answer a new instance of me, containing only the three arguments as	elements."	| (Self instance)newCollection |	newCollection := self new: 4.	newCollection at: 1 put: firstObject.	newCollection at: 2 put: secondObject.	newCollection at: 3 put: thirdObject.	newCollection at: 4 put: fourthObject.	^newCollection! !!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:50'!(Self instance) with: (Object)firstObject with: (Object)secondObject with: (Object)thirdObject with: (Object)fourthObject with: (Object)fifthObject	"Answer a new instance of me, containing only the five arguments as	elements."	| (Self instance)newCollection |	newCollection := self new: 5.	newCollection at: 1 put: firstObject.	newCollection at: 2 put: secondObject.	newCollection at: 3 put: thirdObject.	newCollection at: 4 put: fourthObject.	newCollection at: 5 put: fifthObject.	^newCollection! !!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:51'!(Self instance) with: (Object)firstObject with: (Object)secondObject with: (Object)thirdObject with: (Object)fourthObject with: (Object)fifthObject with: (Object)sixthObject	"Answer a new instance of me, containing only the 6 arguments as elements."	| (Self instance)newCollection |	newCollection := self new: 6.	newCollection at: 1 put: firstObject.	newCollection at: 2 put: secondObject.	newCollection at: 3 put: thirdObject.	newCollection at: 4 put: fourthObject.	newCollection at: 5 put: fifthObject.	newCollection at: 6 put: sixthObject.	^ newCollection! !!ArrayedCollection class methodsFor: 'instance creation' stamp: 'EstebanAllende 2/29/2012 00:51'!(Self instance) withAll: (Collection)aCollection	"Create a new collection containing all the elements from aCollection."	^ (self new: aCollection size) replaceFrom: 1 to: aCollection size with: aCollection! !