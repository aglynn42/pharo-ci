'From Pharo1.4 of 18 April 2012 [Latest update: #14438] on 8 July 2012 at 12:29:18 pm'!Boolean subclass: #True	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Objects'!!True commentStamp: '<historical>' prior: 0!True defines the behavior of its single instance, true -- logical assertion. Notice how the truth-value checks become direct message sends, without the need for explicit testing.Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect.!!True methodsFor: 'controlling' stamp: 'EstebanAllende 2/21/2012 21:37'!(Boolean) and: (→Boolean) alternativeBlock 	"Nonevaluating conjunction -- answer the value of alternativeBlock since	the receiver is true."	^alternativeBlock value! !!True methodsFor: 'controlling' stamp: 'EstebanAllende 7/8/2012 12:27'!(Nil) ifFalse: (→ Any)alternativeBlock 	"Since the condition is true, the value is the true alternative, which is nil. 	Execution does not actually reach here because the expression is compiled 	in-line."	^nil! !!True methodsFor: 'controlling' stamp: 'EstebanAllende 7/8/2012 12:28'!(A) ifFalse: (→ Any)falseAlternativeBlock ifTrue: (→ A)trueAlternativeBlock 	"Answer the value of trueAlternativeBlock. Execution does not 	actually reach here because the expression is compiled in-line."	^trueAlternativeBlock value! !!True methodsFor: 'controlling' stamp: 'EstebanAllende 7/8/2012 12:27'!(A) ifTrue: (→ A) alternativeBlock 	"Answer the value of alternativeBlock. Execution does not actually 	reach here because the expression is compiled in-line."	^alternativeBlock value! !!True methodsFor: 'controlling' stamp: 'EstebanAllende 7/8/2012 12:28'!(A) ifTrue: (→ A) trueAlternativeBlock ifFalse: (→ Any)falseAlternativeBlock 	"Answer with the value of trueAlternativeBlock. Execution does not 	actually reach here because the expression is compiled in-line."	^trueAlternativeBlock value! !!True methodsFor: 'controlling' stamp: 'EstebanAllende 2/21/2012 21:39'!(True) or: (→ Boolean)alternativeBlock 	"Nonevaluating disjunction -- answer true since the receiver is true."	^self! !!True methodsFor: 'logical operations' stamp: 'EstebanAllende 7/8/2012 12:26'!(Boolean) & (Boolean)aBoolean 	"Evaluating conjunction -- answer aBoolean since receiver is true."	^aBoolean! !!True methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 21:34'!(False) not	"Negation--answer false since the receiver is true."	^false! !!True methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 21:39'!(Boolean) xor: (Boolean)aBoolean	"Posted by Eliot Miranda to squeak-dev on 3/24/2009"		^aBoolean value not! !!True methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 21:39'!(True) | (Boolean)aBoolean 	"Evaluating disjunction (OR) -- answer true since the receiver is true."	^self! !!True methodsFor: 'printing' stamp: 'EstebanAllende 2/21/2012 21:40'!(SmallInteger) asBit	^ 1! !!True methodsFor: 'printing' stamp: 'EstebanAllende 2/21/2012 21:41'!(Self) printOn: (Stream) aStream 	aStream nextPutAll: 'true'! !