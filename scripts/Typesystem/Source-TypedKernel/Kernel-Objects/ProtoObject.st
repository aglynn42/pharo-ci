'From Pharo1.4 of 18 April 2012 [Latest update: #14447] on 2 July 2012 at 11:31:05 pm'![ProtoObject subclass: #ProtoObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Objects'.ProtoObject superclass: nil] on: Error do: [:ex|ex resumeUnchecked: nil] !!ProtoObject commentStamp: '<historical>' prior: 0!ProtoObject establishes minimal behavior required of any object in Squeak, even objects that should balk at normal object behavior. Generally these are proxy objects designed to read themselves in from the disk, or to perform some wrapper behavior, before responding to a message. Current examples are ObjectOut and ImageSegmentRootStub, and one could argue that ObjectTracer should also inherit from this class.ProtoObject has no instance variables, nor should any be added.!!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 6/19/2012 15:54'!(?) tryPrimitive: (Integer)primIndex withArgs: (Array)argumentArray	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive: 118 error: code >	|(Integer)code|	^ ContextPart primitiveFailTokenFor: code! !!ProtoObject methodsFor: 'comparing' stamp: 'EstebanAllende 6/19/2012 16:07'!(Boolean) == (ProtoObject)anObject 	"Primitive. Answer whether the receiver and the argument are the same 	object (have the same object pointer). Do not redefine the message == in 	any other class!! Essential. No Lookup. Do not override in any subclass. 	See Object documentation whatIsAPrimitive."	<primitive: 110>	^self primitiveFailed! !!ProtoObject methodsFor: 'comparing' stamp: 'EstebanAllende 6/19/2012 16:08'!(SmallInteger)identityHash	"Answer a SmallInteger whose value is related to the receiver's identity.	This method must not be overridden, except by SmallInteger.		Do not override."	^ (<SmallInteger>self basicIdentityHash bitShift: 18)! !!ProtoObject methodsFor: 'comparing' stamp: 'EstebanAllende 6/19/2012 16:08'!(Boolean) ~~ (ProtoObject)anObject	"Answer whether the receiver and the argument are not the same object 	(do not have the same object pointer)."	self == anObject		ifTrue: [^ false]		ifFalse: [^ true]! !!ProtoObject methodsFor: 'debugging' stamp: 'EstebanAllende 6/19/2012 16:11'!(Self) doOnlyOnce: (→ Any)aBlock	"If the 'one-shot' mechanism is armed, evaluate aBlock once and disarm the one-shot mechanism.  To rearm the mechanism, evaluate  'self rearmOneShot' manually."	(Smalltalk globals at: #OneShotArmed ifAbsent: [ true ])		ifTrue: [ 			Smalltalk globals at: #OneShotArmed put: false.			aBlock value ]! !!ProtoObject methodsFor: 'debugging' stamp: 'EstebanAllende 6/19/2012 16:12'!(Self) flag: (String)aSymbol	"Send this message, with a relevant symbol as argument, to flag a message for subsequent retrieval.  For example, you might put the following line in a number of messages:	self flag: #returnHereUrgently	Then, to retrieve all such messages, browse all senders of #returnHereUrgently."! !!ProtoObject methodsFor: 'debugging' stamp: 'EstebanAllende 6/19/2012 16:13'!(Self) rearmOneShot	"Call this manually to arm the one-shot mechanism; use the mechanism in code by calling		self doOnlyOnce: <a block>"	Smalltalk globals at: #OneShotArmed put: true	"self rearmOneShot"! !!ProtoObject methodsFor: 'debugging' stamp: 'EstebanAllende 6/19/2012 16:13'!(?) withArgs: (Array)argArray executeMethod: (CompiledMethod)compiledMethod	"Execute compiledMethod against the receiver and args in argArray"	<primitive: 188>	^self primitiveFailed! !!ProtoObject methodsFor: 'initialize-release' stamp: 'EstebanAllende 6/19/2012 16:14'!(Self) initialize	"Subclasses should redefine this method to perform initializations on instance creation" ! !!ProtoObject methodsFor: 'objects from disk' stamp: 'EstebanAllende 6/19/2012 16:14'!(Self) rehash	"Do nothing.  Here so sending this to a Set does not have to do a time consuming respondsTo:"! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 6/19/2012 16:22'!(SmallInteger) basicIdentityHash	"Answer a SmallInteger whose value is related to the receiver's identity.	This method must not be overridden, except by SmallInteger.	Primitive. Fails if the receiver is a SmallInteger. Essential.	See Object documentation whatIsAPrimitive.	Do not override. Use #identityHash unless you really know what you're doing.'"	<primitive: 75>	^self primitiveFailed! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 6/19/2012 16:23'!(ProtoObject) become: (ProtoObject)otherObject 	"Primitive. Swap the object pointers of the receiver and the argument.	All variables in the entire system that used to point to the 	receiver now point to the argument, and vice-versa.	Fails if either object is a SmallInteger"	(Array with: self)		elementsExchangeIdentityWith:			(Array with: otherObject)! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 6/19/2012 16:28'!(ProtoObject) cannotInterpret: (Message)aMessage 	 "Handle the fact that there was an attempt to send the given message to the receiver but a null methodDictionary was encountered while looking up the message selector.  Hopefully this is the result of encountering a stub for a swapped out class which induces this exception on purpose.""If this is the result of encountering a swap-out stub, then simulating the lookup in Smalltalk should suffice to install the class properly, and the message may be resent."	(self class lookupSelector: aMessage selector) == nil ifFalse:		["Simulated lookup succeeded -- resend the message."		^ aMessage sentTo: self].	"Could not recover by simulated lookup -- it's an error"	Error signal: 'MethodDictionary fault'.	"Try again in case an error handler fixed things"	^ aMessage sentTo: self! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 6/19/2012 16:30'!(ProtoObject) doesNotUnderstand: (Message)aMessage	^ MessageNotUnderstood new 		message: aMessage;		receiver: self;		signal! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 7/2/2012 23:25'!(Self) nextInstance	"Primitive. Answer the next instance after the receiver in the 	enumeration of all instances of this class. Fails if all instances have been 	enumerated. Essential. See Object documentation whatIsAPrimitive."	<primitive: 78>	^nil! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 6/19/2012 16:33'!(ProtoObject) nextObject	"Primitive. Answer the next object after the receiver in the 	enumeration of all objects. Return 0 when all objects have been 	enumerated."	<primitive: 139>	^self primitiveFailed.! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 7/2/2012 23:30'!(ProtoObject) someObject	"Primitive. Answer the first object in the enumeration of all	 objects."	<primitive: 138>	self primitiveFailed.! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 6/19/2012 16:36'!(Self | A) ifNil: (→A)nilBlock	"Return self, or evaluate the block if I'm == nil (q.v.)"	^ self! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 6/19/2012 16:37'!(A | B) ifNil: (→A)nilBlock ifNotNil: (Self→B | →B)ifNotNilBlock	"Evaluate the block, unless I'm == nil (q.v.)"	^ ifNotNilBlock cull: self! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 6/19/2012 16:38'!(A) ifNotNil: (→A|Self→A)ifNotNilBlock	"Evaluate the block, unless I'm == nil (q.v.)"	^ ifNotNilBlock cull: self! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 6/19/2012 16:39'!(A|B) ifNotNil: (→A|Self→A)ifNotNilBlock ifNil: (→B)nilBlock 	"If I got here, I am not nil, so evaluate the block ifNotNilBlock"	^ ifNotNilBlock cull: self! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 6/19/2012 16:35'!(Boolean) isNil	"Coerces nil to true and everything else to false."	^false! !!ProtoObject methodsFor: 'error handling' stamp: 'EstebanAllende 6/19/2012 15:50'!(Nil) primitiveFailed	"Announce that a primitive has failed and there is no appropriate Smalltalk code to run."	^self primitiveFailed: thisContext sender selector! !!ProtoObject methodsFor: 'error handling' stamp: 'EstebanAllende 6/19/2012 15:49'!(Nil) primitiveFailed: (Symbol) selector	"Announce that a primitive has failed and there is no appropriate Smalltalk code to run."		PrimitiveFailed signalFor: selector.	^nil! !!ProtoObject methodsFor: 'class membership' stamp: 'EstebanAllende 6/19/2012 16:44'!(Self class) class	"Primitive. Answer the object which is the receiver's class. Essential. See 	Object documentation whatIsAPrimitive."	<primitive: 111>	^self primitiveFailed! !