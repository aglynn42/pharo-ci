'From Pharo1.4a of ''16 June 2011'' [Latest update: #14301] on 25 February 2012 at 9:41:29 pm'![ProtoObject subclass: #ProtoObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Objects'.ProtoObject superclass: nil] on: Error do: [:ex| ex resumeUnchecked: nil]!!ProtoObject commentStamp: '<historical>' prior: 0!ProtoObject establishes minimal behavior required of any object in Squeak, even objects that should balk at normal object behavior. Generally these are proxy objects designed to read themselves in from the disk, or to perform some wrapper behavior, before responding to a message. Current examples are ObjectOut and ImageSegmentRootStub, and one could argue that ObjectTracer should also inherit from this class.ProtoObject has no instance variables, nor should any be added.!!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 12/15/2011 15:59'!tryNamedPrimitive	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 12/15/2011 15:59'!tryNamedPrimitive: arg1	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 12/15/2011 15:59'!tryNamedPrimitive: arg1 with: arg2	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 12/15/2011 15:59'!tryNamedPrimitive: arg1 with: arg2 with: arg3	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 12/15/2011 15:59'!tryNamedPrimitive: arg1 with: arg2 with: arg3 with: arg4	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 12/15/2011 15:59'!tryNamedPrimitive: arg1 with: arg2 with: arg3 with: arg4 with: arg5	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 12/15/2011 15:59'!tryNamedPrimitive: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 12/15/2011 15:59'!tryNamedPrimitive: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 12/15/2011 15:59'!tryNamedPrimitive: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive:'' module:''>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'apply primitives' stamp: 'EstebanAllende 12/15/2011 15:59'!tryPrimitive: primIndex withArgs: argumentArray	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive: 118>	^ ContextPart primitiveFailToken! !!ProtoObject methodsFor: 'comparing' stamp: 'EstebanAllende 12/15/2011 18:20'!(Boolean)== (ProtoObject)anObject 	"Primitive. Answer whether the receiver and the argument are the same 	object (have the same object pointer). Do not redefine the message == in 	any other class!! Essential. No Lookup. Do not override in any subclass. 	See Object documentation whatIsAPrimitive."	<primitive: 110>	^self primitiveFailed.! !!ProtoObject methodsFor: 'comparing' stamp: 'EstebanAllende 2/25/2012 21:41'!(SmallInteger) identityHash	"Answer a SmallInteger whose value is related to the receiver's identity.	This method must not be overridden, except by SmallInteger.		Do not override."	^(<SmallInteger>self basicIdentityHash bitShift: 18)! !!ProtoObject methodsFor: 'comparing' stamp: 'EstebanAllende 12/15/2011 18:20'!(Boolean)~~ (ProtoObject)anObject	"Answer whether the receiver and the argument are not the same object 	(do not have the same object pointer)."	self == anObject		ifTrue: [^ false]		ifFalse: [^ true]! !!ProtoObject methodsFor: 'debugging' stamp: 'EstebanAllende 2/21/2012 19:30'!(Self) doOnlyOnce: (→ Object)aBlock	"If the 'one-shot' mechanism is armed, evaluate aBlock once and disarm the one-shot mechanism.  To rearm the mechanism, evaluate  'self rearmOneShot' manually."	(Smalltalk globals at: #OneShotArmed ifAbsent: [ true ])		ifTrue: [ 			Smalltalk globals at: #OneShotArmed put: false.			aBlock value ]! !!ProtoObject methodsFor: 'debugging' stamp: 'EstebanAllende 12/15/2011 18:21'!(Self) flag: (String)aSymbol	"Send this message, with a relevant symbol as argument, to flag a message for subsequent retrieval.  For example, you might put the following line in a number of messages:	self flag: #returnHereUrgently	Then, to retrieve all such messages, browse all senders of #returnHereUrgently."! !!ProtoObject methodsFor: 'debugging' stamp: 'EstebanAllende 12/15/2011 18:21'!(Self) rearmOneShot	"Call this manually to arm the one-shot mechanism; use the mechanism in code by calling		self doOnlyOnce: <a block>"	Smalltalk globals at: #OneShotArmed put: true	"self rearmOneShot"! !!ProtoObject methodsFor: 'debugging' stamp: 'EstebanAllende 12/15/2011 18:21'!(?) withArgs: (Array)argArray executeMethod: (CompiledMethod)compiledMethod	"Execute compiledMethod against the receiver and args in argArray"	<primitive: 188>	^self primitiveFailed! !!ProtoObject methodsFor: 'initialize-release' stamp: 'EstebanAllende 12/15/2011 18:21'!(Self)initialize	"Subclasses should redefine this method to perform initializations on instance creation" ! !!ProtoObject methodsFor: 'objects from disk' stamp: 'EstebanAllende 12/15/2011 18:21'!(Self) rehash	"Do nothing.  Here so sending this to a Set does not have to do a time consuming respondsTo:"! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 12/15/2011 18:21'!(SmallInteger) basicIdentityHash	"Answer a SmallInteger whose value is related to the receiver's identity.	This method must not be overridden, except by SmallInteger.	Primitive. Fails if the receiver is a SmallInteger. Essential.	See Object documentation whatIsAPrimitive.	Do not override. Use #identityHash unless you really know what you're doing.'"	<primitive: 75>	^self primitiveFailed! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 12/15/2011 18:21'!(?) become: (ProtoObject)otherObject 	"Primitive. Swap the object pointers of the receiver and the argument.	All variables in the entire system that used to point to the 	receiver now point to the argument, and vice-versa.	Fails if either object is a SmallInteger"	(Array with: (<Object>self))		elementsExchangeIdentityWith:			(Array with: (<Object>otherObject))! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 2/21/2012 19:28'!(?) cannotInterpret: (Message)aMessage 	 "Handle the fact that there was an attempt to send the given message to the receiver but a null methodDictionary was encountered while looking up the message selector.  Hopefully this is the result of encountering a stub for a swapped out class which induces this exception on purpose.""If this is the result of encountering a swap-out stub, then simulating the lookup in Smalltalk should suffice to install the class properly, and the message may be resent."	(self class lookupSelector: aMessage selector) == nil ifFalse:		["Simulated lookup succeeded -- resend the message."		^ aMessage sentTo: self].	"Could not recover by simulated lookup -- it's an error"	Error signal: 'MethodDictionary fault'.	"Try again in case an error handler fixed things"	^ aMessage sentTo: self! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 12/15/2011 18:21'!(?) doesNotUnderstand: (Message)aMessage	^ MessageNotUnderstood new 		message: aMessage;		receiver: self;		signal! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 12/15/2011 18:21'!(Self) nextInstance	"Primitive. Answer the next instance after the receiver in the 	enumeration of all instances of this class. Fails if all instances have been 	enumerated. Essential. See Object documentation whatIsAPrimitive."	<primitive: 78>	^nil! !!ProtoObject methodsFor: 'system primitives' stamp: 'EstebanAllende 12/15/2011 18:21'!(ProtoObject) nextObject	"Primitive. Answer the next object after the receiver in the 	enumeration of all objects. Return 0 when all objects have been 	enumerated."	<primitive: 139>	^self primitiveFailed.! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 2/20/2012 23:57'!(?) ifNil: (→ ?)nilBlock	"Return self, or evaluate the block if I'm == nil (q.v.)"	^ self! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 2/21/2012 19:33'!(?) ifNil: (→?) nilBlock ifNotNil: (BlockClosure)ifNotNilBlock	"Evaluate the block, unless I'm == nil (q.v.)"	^ ifNotNilBlock cull: self! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 12/15/2011 18:22'!(?) ifNotNil: (BlockClosure)ifNotNilBlock	"Evaluate the block, unless I'm == nil (q.v.)"	^ ifNotNilBlock cull: self! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 2/21/2012 19:34'!(?) ifNotNil: (BlockClosure)ifNotNilBlock ifNil: (→ ?)nilBlock 	"If I got here, I am not nil, so evaluate the block ifNotNilBlock"	^ ifNotNilBlock cull: self! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 12/15/2011 18:22'!(Boolean)isNil	"Coerces nil to true and everything else to false."	^false! !!ProtoObject methodsFor: 'testing' stamp: 'EstebanAllende 12/15/2011 18:22'!(Boolean)pointsTo: (ProtoObject)anObject	"This method returns true if self contains a pointer to anObject,		and returns false otherwise"	<primitive: 132>	"This is the same as the following smalltalk code:	1 to: self class instSize do:		[:i | (self instVarAt: i) == anObject ifTrue: [^ true]].	1 to: self basicSize do:		[:i | (self basicAt: i) == anObject ifTrue: [^ true]].	^ false"	^nil "better than self if the primitive fails"! !!ProtoObject methodsFor: 'pointers to self' stamp: 'EstebanAllende 12/15/2011 18:21'!(Array) pointersTo	^self pointersToExcept: #()! !!ProtoObject methodsFor: 'pointers to self' stamp: 'EstebanAllende 2/24/2012 00:14'!(Array) pointersToExcept: (Collection)objectsToExclude	"Find all objects in the system that hold a pointer to me, excluding those listed"		|(OrderedCollection)results (ProtoObject)anObj |	Smalltalk garbageCollect.	"big collection shouldn't grow, so it's contents array is always the same"	results := OrderedCollection new: 1000.	"allObjectsDo: is expanded inline to keep spurious	 method and block contexts out of the results"	anObj := self someObject.	[0 == anObj] whileFalse: [			(anObj pointsTo: self) ifTrue: [				"exclude the results collector and contexts in call chain"				((anObj ~~ results collector) and:				 [(anObj ~~ objectsToExclude) and:				 [(anObj ~~ thisContext) and:				 [(anObj ~~ thisContext sender) and:				 [anObj ~~ thisContext sender sender]]]])					 ifTrue: [ results add: anObj ].			].		anObj := anObj nextObject.		nil. "So this block returns an Object"	].	objectsToExclude do: [ :(ProtoObject)obj | results removeAllSuchThat: [ :(ProtoObject)el | el == obj]].	^ results asArray! !!ProtoObject methodsFor: '*system-fixes-system primitives' stamp: 'EstebanAllende 12/15/2011 18:23'!(ProtoObject) someObject	"Primitive. Answer the first object in the enumeration of all	 objects."	<primitive: 138>	^self primitiveFailed.! !!ProtoObject methodsFor: '*system-fixes-class' stamp: 'EstebanAllende 12/16/2011 12:14'!(Self class) class	"Primitive. Answer the object which is the receiver's class. Essential. See 	Object documentation whatIsAPrimitive."	<primitive: 111>	^self primitiveFailed! !!ProtoObject methodsFor: '*system-fixes-primitive error handling' stamp: 'EstebanAllende 12/15/2011 18:23'!(?) primitiveFailed	"Announce that a primitive has failed and there is no appropriate Smalltalk code to run."	self primitiveFailed: thisContext sender selector! !!ProtoObject methodsFor: '*system-fixes-primitive error handling' stamp: 'EstebanAllende 2/21/2012 20:14'!(Self) primitiveFailed: (Symbol)selector	"Announce that a primitive has failed and there is no appropriate Smalltalk code to run."		PrimitiveFailed signalFor: selector! !