'From Pharo1.4 of 18 April 2012 [Latest update: #14438] on 17 October 2012 at 11:59:53 am'!Object subclass: #Boolean	uses: TTyped	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Objects'!!Boolean commentStamp: '<historical>' prior: 0!Boolean is an abstract class defining the protocol for logic testing operations and conditional control structures for the logical values represented by the instances of its subclasses True and False.Boolean redefines #new so no instances of Boolean can be created. It also redefines several messages in the 'copying' protocol to ensure that only one instance of each of its subclasses True (the global true, logical assertion) and False (the global false, logical negation) ever exist in the system.!!Boolean methodsFor: '*compatibility' stamp: 'SeanDeNigris 8/31/2011 14:20'!and: block1 and: block2	"Nonevaluating conjunction without deep nesting.	The receiver is evaluated, followed by the blocks in order.	If any of these evaluates as false, then return false immediately,		without evaluating any further blocks.	If all return true, then return true."	self deprecated: 'use and:' on: '27 June 2010' in: 'Pharo1.2'.	self		ifFalse: [ ^ false ].	block1 value		ifFalse: [ ^ false ].	block2 value		ifFalse: [ ^ false ].	^ true! !!Boolean methodsFor: '*compatibility' stamp: 'SeanDeNigris 8/31/2011 14:20'!and: block1 and: block2 and: block3	"Nonevaluating conjunction without deep nesting.	The receiver is evaluated, followed by the blocks in order.	If any of these evaluates as false, then return false immediately,		without evaluating any further blocks.	If all return true, then return true."	self deprecated: 'Use and: instead' on: '27 April 2010' in: 'Pharo1.2'.	self		ifFalse: [ ^ false ].	block1 value		ifFalse: [ ^ false ].	block2 value		ifFalse: [ ^ false ].	block3 value		ifFalse: [ ^ false ].	^ true! !!Boolean methodsFor: '*compatibility' stamp: 'SeanDeNigris 8/31/2011 14:20'!and: block1 and: block2 and: block3 and: block4	"Nonevaluating conjunction without deep nesting.	The receiver is evaluated, followed by the blocks in order.	If any of these evaluates as false, then return false immediately,		without evaluating any further blocks.	If all return true, then return true."	self deprecated: 'Use and: instead' on: '26 May 2010' in: 'Pharo1.2'.	self		ifFalse: [ ^ false ].	block1 value		ifFalse: [ ^ false ].	block2 value		ifFalse: [ ^ false ].	block3 value		ifFalse: [ ^ false ].	block4 value		ifFalse: [ ^ false ].	^ true! !!Boolean methodsFor: '*compatibility' stamp: 'SeanDeNigris 8/31/2011 14:20'!or: block1 or: block2	"Nonevaluating alternation without deep nesting.	The receiver is evaluated, followed by the blocks in order.	If any of these evaluates as true, then return true immediately,		without evaluating any further blocks.	If all return false, then return false."	self deprecated: 'use a or:[b or:[c]] instead' on: '5 February 2010' in: 'Pharo1.2'.	self		ifTrue: [ ^ true ].	block1 value		ifTrue: [ ^ true ].	block2 value		ifTrue: [ ^ true ].	^ false! !!Boolean methodsFor: '*compatibility' stamp: 'SeanDeNigris 8/31/2011 14:20'!or: block1 or: block2 or: block3	"Nonevaluating alternation without deep nesting.	The receiver is evaluated, followed by the blocks in order.	If any of these evaluates as true, then return true immediately,		without evaluating any further blocks.	If all return false, then return false."	self deprecated: 'use a or:[b or:[c or:[d]]] instead' on: '5 February 2010' in: 'Pharo1.2'.	self		ifTrue: [ ^ true ].	block1 value		ifTrue: [ ^ true ].	block2 value		ifTrue: [ ^ true ].	block3 value		ifTrue: [ ^ true ].	^ false! !!Boolean methodsFor: '*compatibility' stamp: 'SeanDeNigris 8/31/2011 14:20'!or: block1 or: block2 or: block3 or: block4	"Nonevaluating alternation without deep nesting.	The receiver is evaluated, followed by the blocks in order.	If any of these evaluates as true, then return true immediately,		without evaluating any further blocks.	If all return false, then return false."	self deprecated: 'use a or:[b or:[c or:[d or:[e]]]] instead' on: '5 February 2010' in: 'Pharo1.2'.	self		ifTrue: [ ^ true ].	block1 value		ifTrue: [ ^ true ].	block2 value		ifTrue: [ ^ true ].	block3 value		ifTrue: [ ^ true ].	block4 value		ifTrue: [ ^ true ].	^ false! !!Boolean methodsFor: 'controlling' stamp: 'EstebanAllende 2/21/2012 19:52'!(Boolean) and: (→ Boolean)alternativeBlock 	"Nonevaluating conjunction. If the receiver is true, answer the value of 	the argument, alternativeBlock; otherwise answer false without 	evaluating the argument."	^self subclassResponsibility! !!Boolean methodsFor: 'controlling' stamp: 'EstebanAllende 10/17/2012 11:58'!(a) ifFalse: (→ a) alternativeBlock 	"If the receiver is true (i.e., the condition is true), then the value is the 	true alternative, which is nil. Otherwise answer the result of evaluating 	the argument, alternativeBlock. Create an error notification if the 	receiver is nonBoolean. Execution does not actually reach here because 	the expression is compiled in-line."	^self subclassResponsibility! !!Boolean methodsFor: 'controlling' stamp: 'EstebanAllende 10/17/2012 11:59'!(a|b) ifFalse: (→ a) falseAlternativeBlock ifTrue: (→ b)trueAlternativeBlock 	"Same as ifTrue:ifFalse:."	^self subclassResponsibility! !!Boolean methodsFor: 'controlling' stamp: 'EstebanAllende 10/17/2012 11:59'!(a) ifTrue: (→ a) alternativeBlock 	"If the receiver is false (i.e., the condition is false), then the value is the 	false alternative, which is nil. Otherwise answer the result of evaluating 	the argument, alternativeBlock. Create an error notification if the 	receiver is nonBoolean. Execution does not actually reach here because 	the expression is compiled in-line."	^self subclassResponsibility! !!Boolean methodsFor: 'controlling' stamp: 'EstebanAllende 10/17/2012 11:59'!(a|b) ifTrue: (→ a) trueAlternativeBlock ifFalse: (→ b) falseAlternativeBlock	"If the receiver is true (i.e., the condition is true), then answer the value 	of the argument trueAlternativeBlock. If the receiver is false, answer the 	result of evaluating the argument falseAlternativeBlock. If the receiver 	is a nonBoolean then create an error notification. Execution does not 	actually reach here because the expression is compiled in-line."	^self subclassResponsibility! !!Boolean methodsFor: 'controlling' stamp: 'EstebanAllende 2/21/2012 19:52'!(Boolean) or: (→ Boolean) alternativeBlock 	"Nonevaluating disjunction. If the receiver is false, answer the value of 	the argument, alternativeBlock; otherwise answer true without 	evaluating the argument."	^self subclassResponsibility! !!Boolean methodsFor: 'copying' stamp: 'EstebanAllende 2/21/2012 19:47'!(Self) deepCopy 	"Receiver has two concrete subclasses, True and False.	Only one instance of each should be made, so return self."! !!Boolean methodsFor: 'copying' stamp: 'EstebanAllende 2/21/2012 19:51'!(Self) shallowCopy 	"Receiver has two concrete subclasses, True and False.	Only one instance of each should be made, so return self."! !!Boolean methodsFor: 'copying' stamp: 'EstebanAllende 2/21/2012 19:52'!(Self) veryDeepCopyWith: (DeepCopier) deepCopier	"Return self.  I can't be copied.  Do not record me."! !!Boolean methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 19:45'!(Boolean) & (Boolean)aBoolean 	"Evaluating conjunction. Evaluate the argument. Then answer true if 	both the receiver and the argument are true."	^self subclassResponsibility! !!Boolean methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 19:49'!(Boolean) ==> (→ Boolean) aBlock	"The material conditional, also known as the material implication or truth functional conditional.	Correspond to not ... or ... and does not correspond to the English if...then... construction.			 known as:			b if a 			a implies b			if a then b			b is a consequence of a			a therefore b (but note: 'it is raining therefore it is cloudy' is implication; 'it is autumn therefore the leaves are falling' is equivalence).			Here is the truth table for material implication:		   p   |   q   |   p ==> q	-------|-------|-------------	   T   |   T   |      T	   T   |   F   |      F	   F   |   T   |      T	   F   |   F   |      T	"	^self not or: [aBlock value]! !!Boolean methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 19:46'!(Boolean) eqv: (Boolean)aBoolean 	"Answer true if the receiver is equivalent to aBoolean."	^self == aBoolean! !!Boolean methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 19:45'!(Boolean) not	"Negation. Answer true if the receiver is false, answer false if the 	receiver is true."	^self subclassResponsibility! !!Boolean methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 19:45'!(Boolean) | (Boolean) aBoolean 	"Evaluating disjunction (OR). Evaluate the argument. Then answer true 	if either the receiver or the argument is true."	^self subclassResponsibility! !!Boolean methodsFor: 'printing' stamp: 'EstebanAllende 2/21/2012 19:50'!(Boolean) isLiteral 	^ true! !!Boolean methodsFor: 'printing' stamp: 'EstebanAllende 7/7/2012 17:45'!(Self) storeOn: (WriteStream) aStream 	"Refer to the comment in Object|storeOn:."	self printOn: aStream! !!Boolean methodsFor: 'self evaluating' stamp: 'EstebanAllende 2/21/2012 19:50'!(Boolean) isSelfEvaluating	^ true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Boolean class	uses: TTyped classTrait	instanceVariableNames: ''!!Boolean class methodsFor: '*System-Settings-Browser' stamp: 'alain.plantec 3/18/2009 14:48'!settingInputWidgetForNode: aSettingNode	^ aSettingNode inputWidgetForBoolean! !!Boolean class methodsFor: 'instance creation' stamp: 'EstebanAllende 7/8/2012 12:23'!(Self instance) new	^self error: 'You may not create any more Booleans - this is two-valued logic'! !