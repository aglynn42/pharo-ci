'From Pharo1.4 of 18 April 2012 [Latest update: #14438] on 8 July 2012 at 12:30:39 pm'!Boolean subclass: #False	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Objects'!!False commentStamp: '<historical>' prior: 0!False defines the behavior of its single instance, false -- logical negation. Notice how the truth-value checks become direct message sends, without the need for explicit testing.Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect.!!False methodsFor: 'controlling' stamp: 'EstebanAllende 2/21/2012 21:44'!(False) and: (→ Boolean)alternativeBlock 	"Nonevaluating conjunction -- answer with false since the receiver is false."	^self! !!False methodsFor: 'controlling' stamp: 'EstebanAllende 7/8/2012 12:29'!(A) ifFalse: (→ A)alternativeBlock 	"Answer the value of alternativeBlock. Execution does not actually	reach here because the expression is compiled in-line."	^alternativeBlock value! !!False methodsFor: 'controlling' stamp: 'EstebanAllende 7/8/2012 12:29'!(A) ifFalse: (→A)falseAlternativeBlock ifTrue: (→Any)trueAlternativeBlock 	"Answer the value of falseAlternativeBlock. Execution does not	actually reach here because the expression is compiled in-line."	^falseAlternativeBlock value! !!False methodsFor: 'controlling' stamp: 'EstebanAllende 7/8/2012 12:30'!(Nil) ifTrue: (→Any)alternativeBlock 	"Since the condition is false, answer the value of the false alternative, 	which is nil. Execution does not actually reach here because the	expression is compiled in-line."	^nil! !!False methodsFor: 'controlling' stamp: 'EstebanAllende 7/8/2012 12:30'!(A) ifTrue: (→Any)trueAlternativeBlock ifFalse: (→A)falseAlternativeBlock 	"Answer the value of falseAlternativeBlock. Execution does not	actually reach here because the expression is compiled in-line."	^falseAlternativeBlock value! !!False methodsFor: 'controlling' stamp: 'EstebanAllende 2/21/2012 21:46'!(Boolean) or: (→Boolean)alternativeBlock 	"Nonevaluating disjunction -- answer value of alternativeBlock."	^alternativeBlock value! !!False methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 21:42'!(False) & (Boolean)aBoolean 	"Evaluating conjunction -- answer false since receiver is false."	^self! !!False methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 21:42'!(True) not	"Negation -- answer true since the receiver is false."	^true! !!False methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 21:43'!(Boolean) xor: (Boolean)aBoolean	"Posted by Eliot Miranda to squeak-dev on 3/24/2009"	^aBoolean value! !!False methodsFor: 'logical operations' stamp: 'EstebanAllende 2/21/2012 21:43'!(Boolean) | (Boolean)aBoolean 	"Evaluating disjunction (OR) -- answer with the argument, aBoolean."	^aBoolean! !!False methodsFor: 'printing' stamp: 'EstebanAllende 2/21/2012 21:46'!(SmallInteger) asBit	^ 0! !!False methodsFor: 'printing' stamp: 'EstebanAllende 2/21/2012 21:46'!(Self) printOn: (Stream)aStream 	aStream nextPutAll: 'false'! !