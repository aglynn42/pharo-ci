Object subclass: #InferenceEngine	instanceVariableNames: 'targetClass'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Inference'!!InferenceEngine methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:11'!targetClass	^ targetClass! !!InferenceEngine methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:11'!targetClass: anObject	targetClass := anObject! !!InferenceEngine methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:17'!inferenceInstanceVariables	^self subclassResponsibility! !!InferenceEngine methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:13'!inferenceTypesOnMethod: aSelector	^self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InferenceEngine class	instanceVariableNames: ''!!InferenceEngine class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:12'!onClass: aClass	^self new targetClass: aClass; yourself! !RBProgramNodeVisitor subclass: #ASTInferenceVisitor	instanceVariableNames: 'inferenceDictionary dependencySet ownerClass declaredMethodSelector'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Inference'!!ASTInferenceVisitor methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:19'!declaredMethodSelector	^ declaredMethodSelector! !!ASTInferenceVisitor methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:19'!declaredMethodSelector: anObject	declaredMethodSelector := anObject! !!ASTInferenceVisitor methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:19'!dependencySet	^ dependencySet! !!ASTInferenceVisitor methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:19'!dependencySet: anObject	dependencySet := anObject! !!ASTInferenceVisitor methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:21'!inferenceDictionary	^ inferenceDictionary! !!ASTInferenceVisitor methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:21'!inferenceDictionary: anObject	inferenceDictionary := anObject! !!ASTInferenceVisitor methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:19'!ownerClass	^ ownerClass! !!ASTInferenceVisitor methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:19'!ownerClass: anObject	ownerClass := anObject! !!ASTInferenceVisitor methodsFor: 'initialize-release' stamp: 'EstebanAllende 11/21/2012 19:19'!initialize	dependencySet := IdentitySet new.! !!ASTInferenceVisitor methodsFor: 'visitor-double dispatching' stamp: 'EstebanAllende 11/21/2012 19:19'!acceptMessageNode: aMessageNode 	| receiverType classDescription methodDeclaration|	super acceptMessageNode: aMessageNode.	receiverType := aMessageNode propertyAt: #receiverType ifAbsent: [^self].	classDescription := nil.	(receiverType isNominal | receiverType isSelf )ifTrue: [		classDescription := receiverType classRef.		receiverType isSuper ifTrue: [			classDescription := classDescription superclass.		].	]."	receiverType isSelf ifTrue: [		receiverType annotateSelfWith: ownerClass inMethod: declaredMethodSelector withKind: #normal.		classDescription := receiverType classRef			]."	classDescription ifNotNil: [		methodDeclaration := TypeDictionary uniqueInstance getMethodDeclaration: aMessageNode selector from: classDescription.		methodDeclaration ifNotNil: [dependencySet add: methodDeclaration].	].	^self.! !!ASTInferenceVisitor methodsFor: 'visitor-double dispatching' stamp: 'EstebanAllende 11/21/2012 19:19'!acceptMethodNode: aMethodNode 	declaredMethodSelector := aMethodNode selector.	^super acceptMethodNode: aMethodNode ! !Object subclass: #InferenceSystem	instanceVariableNames: 'inferenceEngine'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Inference'!InferenceEngine subclass: #RoelTyperInferenceEngine	instanceVariableNames: 'dictionary'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Inference'!!RoelTyperInferenceEngine methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:17'!inferenceInstanceVariables	^dictionary at: #instVars! !!RoelTyperInferenceEngine methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:16'!inferenceTypesOnMethod: aSelector	^(dictionary at: #methods) at: aSelector! !!RoelTyperInferenceEngine methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:16'!targetClass: aClass	super targetClass: aClass.	dictionary := TypeCollector typeInstvarsOfClass: aClass! !