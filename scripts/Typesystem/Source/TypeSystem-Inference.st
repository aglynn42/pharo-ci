RBProgramNodeVisitor subclass: #ASTInferenceVisitor	instanceVariableNames: 'dictionary'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Inference'!!ASTInferenceVisitor methodsFor: 'accessing' stamp: 'EstebanAllende 11/22/2012 12:06'!dictionary	^ dictionary! !!ASTInferenceVisitor methodsFor: 'accessing' stamp: 'EstebanAllende 11/22/2012 12:06'!dictionary: anObject	dictionary := anObject! !!ASTInferenceVisitor methodsFor: 'visiting' stamp: 'EstebanAllende 11/22/2012 12:40'!visitArgument: each 	"Here to allow subclasses to detect arguments or temporaries."	|inferredType|	inferredType := dictionary at: each name asSymbol ifAbsent: [nil].	inferredType ifNotNil: [		each propertyAt: #type put: inferredType.	].	^super visitArgument: each.! !!ASTInferenceVisitor methodsFor: 'visitor-double dispatching' stamp: 'EstebanAllende 11/22/2012 12:13'!acceptMethodNode: aMethodNode 	|inferredType|	super acceptMethodNode: aMethodNode.	inferredType := dictionary at: #^ ifAbsent: [nil].	inferredType ifNotNil: [		aMethodNode propertyAt: #returnType put: inferredType.	]	! !Object subclass: #InferenceEngine	instanceVariableNames: 'targetClass'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Inference'!!InferenceEngine methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:11'!targetClass	^ targetClass! !!InferenceEngine methodsFor: 'accessing' stamp: 'EstebanAllende 11/21/2012 19:11'!targetClass: anObject	targetClass := anObject! !!InferenceEngine methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:17'!inferenceInstanceVariables	^self subclassResponsibility! !!InferenceEngine methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:13'!inferenceTypesOnMethod: aSelector	^self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InferenceEngine class	instanceVariableNames: ''!!InferenceEngine class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:12'!onClass: aClass	^self new targetClass: aClass; yourself! !Object subclass: #InferenceSystem	instanceVariableNames: 'inferenceEngine'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Inference'!!InferenceSystem methodsFor: 'accessing' stamp: 'EstebanAllende 11/22/2012 14:49'!inferAndModifyMethod: aSelector	|source class|	source := self methodInference: aSelector.	class := self inferenceEngine targetClass.	(class theNonMetaClass traits includes: TTyped) ifFalse: [		class theNonMetaClass addToComposition: TTyped.	].	class compile: source.	! !!InferenceSystem methodsFor: 'accessing' stamp: 'EstebanAllende 11/22/2012 12:20'!inferenceEngine	^ inferenceEngine! !!InferenceSystem methodsFor: 'accessing' stamp: 'EstebanAllende 11/22/2012 12:20'!inferenceEngine: anObject	inferenceEngine := anObject! !!InferenceSystem methodsFor: 'accessing' stamp: 'EstebanAllende 11/22/2012 12:39'!methodInference: aSelector	|dictionary ast visitor ctx sourceCode|	dictionary := self inferenceEngine inferenceTypesOnMethod: aSelector.	sourceCode := (self inferenceEngine targetClass >> aSelector) sourceCode.	ast := PPTypedSmalltalkParser new parse: sourceCode.	visitor := ASTInferenceVisitor new.	visitor dictionary: dictionary.	visitor visitNode: ast.	^ast formattedCode.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InferenceSystem class	instanceVariableNames: ''!!InferenceSystem class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/22/2012 12:19'!defaultInferenceEngine	^RoelTyperInferenceEngine! !!InferenceSystem class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/22/2012 12:23'!on: aClass 	^self usingEngine: (self defaultInferenceEngine onClass: aClass).! !!InferenceSystem class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/22/2012 12:22'!usingEngine: aEngine	|res|	res := self new.	res inferenceEngine: aEngine.	^res! !InferenceEngine subclass: #RoelTyperInferenceEngine	instanceVariableNames: 'dictionary'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Inference'!!RoelTyperInferenceEngine methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:17'!inferenceInstanceVariables	^dictionary at: #instVars! !!RoelTyperInferenceEngine methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/21/2012 19:16'!inferenceTypesOnMethod: aSelector	^(dictionary at: #methods) at: aSelector! !!RoelTyperInferenceEngine methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 11/22/2012 12:32'!targetClass: aClass	super targetClass: aClass.	dictionary := TypeCollector typeInstvarsOfClass: aClass.	(dictionary at: #instVars) keysAndValuesDo: [:key :value|		(dictionary at: #instVars) at: key put: (self transformToType: value).	].	(dictionary at: #methods) valuesDo: [:methodDict|		methodDict keysAndValuesDo: [:key :value|			methodDict at: key put: (self transformToType: value).		].	].! !!RoelTyperInferenceEngine methodsFor: 'private' stamp: 'EstebanAllende 11/22/2012 12:34'!transformToType: aOrderedCollection	|newCol|	aOrderedCollection size = 0 ifTrue: [^DynType implicitInstance].	newCol := aOrderedCollection copy.	1 to: newCol size do: [:i |		newCol at: i modify: [:orig| NominalType for: orig]	].	newCol size > 1 ifTrue:[		^UnionType new union: newCol	] ifFalse: [		^newCol first.	].! !