Object subclass: #RelationRules	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Rules'!!RelationRules methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/21/2011 17:36'!is: aType1 relatedWith: aType2	^self subclassResponsibility.! !RelationRules subclass: #SubtypingRules	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Rules'!!SubtypingRules methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/26/2012 15:19'!is: aType1 relatedWith: aType2	((self isButtom: aType1) or: [self isTop: aType2]) ifTrue: [^true].	aType2 class caseOf: {		[DynType]->[^aType1 isDyn].		[StructuralType]->[			|t1|			t1 := aType1 asStructuralType ifNil: [^false].			^self isStructural: t1 relatedWith: aType2.		].		[NominalType]->[			|t1 c1 c2|			t1 := aType1 asNominalType ifNil:[^false].			^self isNominal: t1 relatedWith: aType2.		].		[SelfType]->[^aType1 isSelf].		[LambdaType]->[^self isLambda: aType1 relatedWith: aType2].	} otherwise: [self error: 'Unknown kind of Type'].! !!SubtypingRules methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/26/2012 15:08'!isButtom: aType	aType isNominal ifTrue: [^ nil class asType = aType].	^false! !!SubtypingRules methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/26/2012 15:26'!isLambda: aType1 relatedWith: aType2	(self is: aType1 return relatedWith: aType2 return) ifFalse: [^false].	(aType1 params size = aType2 params size) ifFalse: [^false].	1 to: aType1 params size do: [:i|		|t1Param t2Param|		t1Param := aType1 params at: i.		t2Param := aType2 params at: i.		(self is: t2Param relatedWith: t1Param) ifFalse: [^false]	].	^true! !!SubtypingRules methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/26/2012 15:22'!isNominal: aType1 relatedWith: aType2	|c1 c2|	c1 := aType1 classRef ifNil: [^true].	c2 := aType2 classRef ifNil: [^true].	^((c1 = c2) or: [c1 inheritsFrom: c2]).! !!SubtypingRules methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/26/2012 17:43'!isStructural: aType1 relatedWith: aType2	(self is: aType1 base relatedWith: aType2 base)		ifFalse: [^ false].	aType2 methods do: [:method| |type|		type:= aType1 base typeOfSelector: method selector fromClass: Object.		type ifNil: [ |flag| 					flag:=false. 					aType1 methods do: [:each| 						(each selector == method selector) ifTrue: [							flag := self is: each signature relatedWith: method signature] ].					flag ifFalse: [^false]]			ifNotNil: [					(self is: type relatedWith: method signature) ifFalse: [^false]				]		].			^ true! !!SubtypingRules methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/26/2012 15:06'!isTop: aType	^false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SubtypingRules class	instanceVariableNames: ''!!SubtypingRules class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/30/2012 14:04'!initialize	TypeConfiguration uniqueInstance subtypeRules: SubtypingRules new.! !SubtypingRules subclass: #ConsistentSubtypingRules	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Rules'!!ConsistentSubtypingRules methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/30/2012 13:43'!isButtom: aType	^aType isDyn or: [super isButtom: aType].! !!ConsistentSubtypingRules methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/30/2012 13:42'!isTop: aType	^aType isDyn.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ConsistentSubtypingRules class	instanceVariableNames: ''!!ConsistentSubtypingRules class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/30/2012 14:07'!initialize	TypeConfiguration uniqueInstance consistentSubtypeRules: ConsistentSubtypingRules new.! !SubtypingRules initialize!ConsistentSubtypingRules initialize!