'From Pharo1.4 of 18 April 2012 [Latest update: #14448] on 7 July 2012 at 1:46:59 pm'!Object subclass: #Type	uses: TTyped	instanceVariableNames: '(OrderedCollection)classParametrics (Symbol)usedAlias'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Core'!!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:19'!(Boolean) isDyn	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:19'!(Boolean) isLambda	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:19'!(Boolean) isNominal	^false! !!Type methodsFor: '*typesystem-types'!(Boolean) isParametric	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:20'!(Boolean) isSelf	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:20'!(Boolean) isStructural	^false! !!Type methodsFor: '*typesystem-types'!(Boolean) isUnion	^false! !!Type methodsFor: 'accessing' stamp: 'EstebanAllende 3/20/2012 18:30'!(OrderedCollection) classParametrics	^ classParametrics! !!Type methodsFor: 'accessing' stamp: 'EstebanAllende 3/20/2012 18:46'!(Self) classParametrics: (OrderedCollection)anObject		classParametrics := anObject! !!Type methodsFor: 'accessing' stamp: 'EstebanAllende 4/5/2012 11:24'!(Symbol) usedAlias	^ usedAlias! !!Type methodsFor: 'accessing' stamp: 'EstebanAllende 4/5/2012 11:25'!(Self) usedAlias: (Symbol)anObject	usedAlias := anObject! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 7/2/2012 17:51'!(Boolean) = another"   This method declaration is useful when cast are inserted into code. Until then, it useless.       |(Type)a (Type)b ({simplify (→Type)})c|       another ifNil: [^false].       a:= self simplify.       [c := another] on: CastError do: [:ex | ^ false].       b:= c simplify.       ^[a typeEquality: b] on: CastError do: [:ex | false]"|(Type)a (Type)b|another ifNil: [^false].a:= self simplify.b:= another simplify.(a class = b class) ifFalse: [^false].^a typeEquality: b! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 7/3/2012 17:39'!(Self) addAlias: (Symbol) alias	TypeDictionary uniqueInstance name: alias aliasTo: self.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 7/7/2012 12:18'!(Self) addCountIn: (Dictionary)aDictionary	|implicitDyn|	aDictionary at: #Total modify: [:act| act +1].	self classParametrics ifNotNil: [ 		(self classParametrics size > 0)			ifTrue: [aDictionary at: #GenericUsage modify: [:act| act + 1]].		self classParametrics do: [:each| each addCountIn: aDictionary].		implicitDyn := ((TypeDictionary uniqueInstance getLocalParametricList: self asNominalType classRef) size) -  (self classParametrics size).		(implicitDyn > 0) ifTrue: [			aDictionary at: #ImplicitDyn modify: [:act| act+ implicitDyn].			aDictionary at: #DynType modify: [:act| act+ implicitDyn].		]	] ifNil: [		implicitDyn := (TypeDictionary uniqueInstance getLocalParametricList: self asNominalType classRef) size.		(implicitDyn > 0) ifTrue: [			aDictionary at: #ImplicitDyn modify: [:act| act+ implicitDyn].			aDictionary at: #DynType modify: [:act| act+ implicitDyn].		]	].! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/23/2011 12:02'!(Type) annotateSelfWith: (ClassDescription)aClass inMethod: (MethodSignature) aMethodSignature withKind: (Symbol) aSymbol	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 3/28/2012 15:16'!(NominalType) asNominalType	^nil! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 4/5/2012 11:26'!(String) asString	usedAlias notNil ifTrue: [^usedAlias asString].	(classParametrics isNil or: [classParametrics size = 0])		ifTrue: [^self baseString]		ifFalse: [^self baseString,'<',(', ' join: classParametrics),'>']! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/26/2012 14:43'!(StructuralType) asStructuralType	^nil! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 4/9/2012 11:04'!(Self) asType	^self! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 4/9/2012 11:04'!(String) baseString		^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) classType	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 7/2/2012 23:56'!(Self) generateDictionaryWith: (Type) aType andDictionary: (Dictionary) dict	"aType isSubtype."	|(Collection)aTypeClassParametrics (Integer)min|	aType isUnion ifTrue: [		(<UnionType>aType) union do: [:(Type)each|self generateDictionaryWith: each andDictionary: dict].		^self.	].	classParametrics ifNil:[^self].	aTypeClassParametrics := aType classParametrics ifNil: [#()].	min := classParametrics size min: aTypeClassParametrics size.	1 to: classParametrics size do: [ :(Integer)i| |(Type)each|		each := classParametrics at: i.		(i <= min) 			ifTrue: [ each generateDictionaryWith: (aTypeClassParametrics at: i) andDictionary: dict]			ifFalse: [each generateDictionaryWith: DynType implicitInstance andDictionary: dict].	].	"(classParametrics size = aType classParametrics size) ifFalse: [ResolveError signal: 'Incorrect numbers of generics between (', self asString,') and (',aType asString,')'].	classParametrics with: aType classParametrics do: [:(Type)each :(Type)another| each generateDictionaryWith: another andDictionary: dict]."	^self! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Integer) hash	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) instanceType	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 3/20/2012 13:36'!(Boolean) isCasteableTo: (Type) aType	^Type is: self casteableTo: aType! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Boolean) isConsistentSubtypeOf: (Type) aType	^Type is: self consistentSubtypeOf: aType! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Boolean) isSubtypeOf: (Type) aType	^Type is: self subtypeOf: aType! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Boolean) isType	^true! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/22/2011 12:06'!(Boolean) isValid	^self validate size = 0! !!Type methodsFor: 'as yet unclassified'!(Type) lowestCommonAncestorBetween: (Type) another	^self subclassResponsibility.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) pureType	^self	! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) replaceSelfWith: (Type) aType	^self subclassResponsibility.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 4/9/2012 12:04'!(Type) resolveLocalWith: (TypeEnvironment) env	^self resolveWith: env ifNotFoundStore: [:(Symbol)name| 		|(ParametricType) pRes|		pRes := ParametricType new.		pRes kind: #local.		pRes name: name.		pRes	].	! !!Type methodsFor: 'as yet unclassified'!(OrderedCollection) resolveParametricInGenericsWithReceiver: (Type)receiver andDictionary: (Dictionary) dict	^classParametrics ifNotNil: [		classParametrics collect: [:(Type)each| each resolveParametricWithReceiver: receiver andDictionary: dict].	] ifNil: [nil].! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 7/3/2012 02:07'!(Type) resolveParametricWith: (Type)aType andReceiver: (Type) receiver	|(Dictionary) dict|	dict := Dictionary new.	dict at: #rcv put: receiver.	self generateDictionaryWith: aType andDictionary: dict.	^self resolveParametricWithReceiver: receiver andDictionary: dict.	! !!Type methodsFor: 'as yet unclassified'!(Type) resolveParametricWithReceiver: (Type)receiver andDictionary: (Dictionary) dict	^self subclassResponsibility.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 6/19/2012 18:04'!(Type) resolveWith: (TypeEnvironment) env	^self resolveWith: env ifNotFoundStore: [:(Symbol)name| 		|(ParametricType) pRes|		pRes := ParametricType new.		env local ifTrue: [pRes kind: #local] ifFalse: [pRes kind: #method].		pRes name: name.		pRes	].! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 4/9/2012 11:44'!(Type) resolveWith: (TypeEnvironment) env ifNotFoundStore: (Symbol → Type) aBlock	classParametrics ifNotNil: [		classParametrics := classParametrics collect: [:each| each resolveWith: env ifNotFoundStore: aBlock].	].	^self.	! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) simplify	^self! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/13/2011 18:47'!(Boolean) typeEquality: (Self) another	<access: #protected>	^self subclassResponsibility.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 11:49'!(Type) typeOfSelector: (Symbol)selector fromClass: (ClassDescription) requestor	^self subclassResponsibility.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/22/2011 12:14'!(OrderedCollection) validate	^#() asOrderedCollection! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Type class	uses: TTyped classTrait	instanceVariableNames: ''!!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:12'!compilerContext	^OTCSupport defaultCompilerContext! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 7/3/2012 18:03'!(Type) defaultType	^TypeConfiguration uniqueInstance defaultType! !!Type class methodsFor: 'as yet unclassified'!(Boolean) is: (Type) type1 casteableTo: (Type) type2	^TypeConfiguration uniqueInstance castingRules is: type1 relatedWith: type2.! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/30/2012 14:00'!(Boolean) is: (Type) type1 consistentSubtypeOf: (Type) type2	^TypeConfiguration uniqueInstance consistentSubtypeRules is: type1 relatedWith: type2.! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/30/2012 14:00'!(Boolean) is: (Type) type1 subtypeOf: (Type) type2	^TypeConfiguration uniqueInstance subtypeRules is: type1 relatedWith: type2.! !