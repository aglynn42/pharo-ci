Object subclass: #LambdaDataRecollection	instanceVariableNames: 'obc numberOfInvocation parameterTable returnTable isFunction isIndependent returnValueClass parametersReturnAssociation sourceTable'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Research'!!LambdaDataRecollection methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/13/2012 21:32'!initialize	obc := nil.	numberOfInvocation := 0.	returnTable := IdentityDictionary new.	parametersReturnAssociation := Dictionary new.	isFunction := true.	isIndependent := true.	sourceTable := IdentityDictionary new.! !!LambdaDataRecollection methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/18/2012 13:19'!newInvocationFrom: source withParams: args andReturn: return	|classArgs classReturn assocRet|	numberOfInvocation := numberOfInvocation + 1.	classArgs := args asArray collect: [:each|(each class = WrappedLambda) ifTrue: [BlockClosure] ifFalse: [each class]].	classReturn := (return class = WrappedLambda) ifTrue: [BlockClosure] ifFalse: [return class].	1 to: obc numArgs do: [:i| |table ca|		ca := classArgs at: i.		table := parameterTable at: i.		table at: ca ifAbsentPut: [0].		table at: ca modify: [:val| val + 1]	].	(parameterTable at: obc numArgs + 1) at: classArgs ifAbsentPut: [0].	(parameterTable at: obc numArgs + 1) at: classArgs modify: [:val| val +1].	returnTable at: classReturn ifAbsentPut: [0].	returnTable at: classReturn modify: [:val| val +1].		assocRet := parametersReturnAssociation at: classArgs ifAbsentPut: [classReturn].	(assocRet == classReturn) ifFalse: [isFunction := false].	returnValueClass 		ifNil: [returnValueClass := classReturn]		ifNotNil: [(classReturn inheritsFrom: returnValueClass) 			ifFalse: [				(returnValueClass inheritsFrom: classReturn)					ifTrue: [returnValueClass := classReturn]					ifFalse: [isIndependent := false]			]].	sourceTable at: source ifAbsentPut: [0].	sourceTable at: source modify: [:val| val+1].	! !!LambdaDataRecollection methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/13/2012 21:35'!obc: anObject	obc := anObject.	parameterTable := Array new: obc numArgs + 1.	1 to: obc numArgs do: [:i|		parameterTable at: i put: IdentityDictionary new.	].	parameterTable at: obc numArgs +1 put: Dictionary new.! !