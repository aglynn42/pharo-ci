Object subclass: #TSUISettings	instanceVariableNames: 'uiContent typeCheckingButton castButton instrumentatioButton typeCheckingColor castsColor instrumentationColor'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-UI'!!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:57'!castButtonText	^ TypeConfiguration uniqueInstance enableCasts  			ifTrue: [				self castsColor color: Color green .				self class activeText] 			ifFalse: [				self castsColor color: Color red .				self class deactiveText]! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:57'!castsColor 	^ castsColor ifNil:[castsColor := self morphWithColor: Color white ]! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/24/2012 11:30'!createUIContent 	|builder|	builder := UITheme builder .		typeCheckingButton := builder newButtonFor: self action: #toggleTypeChecking label: (self typeCheckingButtonText)  help: 'Activate or deactive the type system'.	castButton := builder newButtonFor: self action: #toggleCasts label: (self castButtonText)  help: 'Activate or deactive runtime casts'.	instrumentatioButton  := builder newButtonFor: self action: #toggleInstrumentation label: (self instrumentatioButtonText)  help: 'Activate or deactive the instrumentation'.			uiContent := builder newColumn: {		builder newLabelGroup:  {			'Type-checking: ' -> (builder newRow: {  typeCheckingColor  . typeCheckingButton}) .			'Runtime-casts: ' -> (builder newRow: {   castsColor  . castButton}) .			'Instrumentation: ' -> (builder newRow: {  instrumentationColor  . instrumentatioButton})		}	}! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:01'!initialize 	super initialize .	self createUIContent ! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:59'!instrumentatioButtonText	^ TypeConfiguration uniqueInstance enableInstrumentation 			ifTrue: [				self instrumentationColor color: Color green .				self class activeText] 			ifFalse: [				self instrumentationColor color: Color red .				self class deactiveText]! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/24/2012 00:01'!instrumentationColor 	^ instrumentationColor ifNil: [instrumentationColor := self morphWithColor: Color white]! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:54'!morphWithColor: color	^ Morph new extent: 40@20; color: color! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:49'!open	(uiContent openInWindowLabeled: 'Gradualtalk settings') extent: 300@120	! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:34'!toggleCasts	TypeConfiguration uniqueInstance enableCasts: TypeConfiguration uniqueInstance enableCasts not.	castButton  label: self castButtonText  .! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:35'!toggleInstrumentation	TypeConfiguration uniqueInstance enableInstrumentation: TypeConfiguration uniqueInstance enableInstrumentation not.	instrumentatioButton  label: self instrumentatioButtonText   .! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:34'!toggleTypeChecking	TypeConfiguration uniqueInstance disable: TypeConfiguration uniqueInstance disable not.	typeCheckingButton label: self typeCheckingButtonText .! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/24/2012 00:05'!typeCheckingButtonText	^ TypeConfiguration uniqueInstance disable 			ifTrue: [ 				self typeCheckingColor color: Color red .				self class deactiveText ] 			ifFalse: [				self typeCheckingColor color: Color green .				self class activeText ]! !!TSUISettings methodsFor: 'as yet unclassified' stamp: 'OzC 8/24/2012 00:01'!typeCheckingColor	^ typeCheckingColor ifNil: [typeCheckingColor := self morphWithColor: Color white]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TSUISettings class	instanceVariableNames: 'instance'!!TSUISettings class methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:53'!activeText 	^ '    Activated    '! !!TSUISettings class methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 23:52'!deactiveText 	^ '  Deactivated  '! !!TSUISettings class methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 22:55'!forceCleanUp	instance := nil! !!TSUISettings class methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 22:57'!forceOpen	^ self 	forceCleanUp ;			open! !!TSUISettings class methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 22:50'!instance 	^ instance ifNil: [instance := super new.]! !!TSUISettings class methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 22:50'!new	^ self instance! !!TSUISettings class methodsFor: 'as yet unclassified' stamp: 'OzC 8/23/2012 22:51'!open	^ self instance open! !ComposableModel subclass: #TypeCheckErrorBrowser	instanceVariableNames: 'listModel textModel browseButton remButton remAllButton'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-UI'!!TypeCheckErrorBrowser methodsFor: 'initialization' stamp: 'johanfabry 9/22/2012 21:08'!initializePresenter	self listModel whenSelectedItemChanged: [:error |		error isNil		 ifTrue: [			self textModel text: 'Please select an error.'.			self browseButton action: [].			self remButton action: []]		 ifFalse: [			self browseButton action: [self listModel selectedItem browse].			self remButton action: [				self listModel listItems removeAt: (self listModel selectedIndex).				self listModel updateList].			self textModel text: error messageText.]]! !!TypeCheckErrorBrowser methodsFor: 'initialization' stamp: 'johanfabry 9/22/2012 21:08'!initializeWidgets	self instantiateModels: {		#listModel -> #ListComposableModel.		#browseButton -> #ButtonModel.		#remButton -> #ButtonModel.		#remAllButton -> #ButtonModel.		#textModel -> #TextModel }.		self listModel items: OrderedCollection new.	self listModel displayBlock: [:error |	error sourceRef asString].		self browseButton label: 'Browse'.	self browseButton state: false.		self remButton label: 'Remove'.	self remButton state: false.		self remAllButton label: 'Remove All'.	self remAllButton state: false.	self remAllButton action: [self listModel items: OrderedCollection new. self listModel updateList].		self textModel text: 'Please select an error.'.	self textModel enabled: false.	! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 20:48'!browseButton	^browseButton! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 20:48'!browseButton: anObject	^browseButton := anObject ! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 19:08'!listModel	^listModel! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 19:08'!listModel: anObject	^listModel := anObject ! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 20:49'!remAllButton	^remAllButton! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 20:49'!remAllButton: anObject	^remAllButton := anObject ! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 20:48'!remButton	^remButton! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 20:49'!remButton: anObject	^remButton := anObject ! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 19:37'!textModel	^textModel! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 19:37'!textModel: anObject	^textModel := anObject ! !!TypeCheckErrorBrowser methodsFor: 'accessing' stamp: 'johanfabry 9/22/2012 19:25'!title	^'Type check errors'! !!TypeCheckErrorBrowser methodsFor: 'protocol' stamp: 'johanfabry 9/22/2012 19:21'!addItems: anOrderedCollection		anOrderedCollection addAll: listModel listItems.		self listModel items: anOrderedCollection.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TypeCheckErrorBrowser class	instanceVariableNames: 'uniqueInstance'!!TypeCheckErrorBrowser class methodsFor: 'specs' stamp: 'johanfabry 9/22/2012 21:09'!defaultSpec 		^ SpecLayout composed		add: #listModel origin: 0@0 corner: 1@1offsetOrigin: 0@0 offsetCorner: 0@(-75) ;		add: #browseButton origin: 0@1 corner: 0.4@1 offsetOrigin: 0@(-70) offsetCorner: (-2)@(-50);		add: #remButton origin: 0.4@1 corner: 0.7@1 offsetOrigin: 2@(-70) offsetCorner: (-2)@(-50);		add: #remAllButton origin: 0.7@1 corner: 1@1 offsetOrigin: 2@(-70) offsetCorner: 0@(-50);		add: #textModel origin: 0@1 corner: 1@1 offsetOrigin: 0@(-45) offsetCorner: 0@0;		yourself! !!TypeCheckErrorBrowser class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 9/30/2012 21:53'!uniqueInstance	^uniqueInstance ifNil: [		uniqueInstance := self new.		uniqueInstance openWithSpec.		uniqueInstance.	].! !