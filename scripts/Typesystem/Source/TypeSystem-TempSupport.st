PPBaseSmalltalkGrammar subclass: #PPTypeGrammar	instanceVariableNames: 'selfType dynType nominalClassType nominalType basicType methodSignatures unaryType selector parenType methodSignature nominalIdentifier type multipleKeywordToken lambdaType complexType lambdaSpecialToken generics genericDeclaration compositeType parametricIdentifier parametricType'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-TempSupport'!!PPTypeGrammar commentStamp: 'EstebanAllende 10/1/2012 15:16' prior: 0!A PPTypeGrammar is the grammar for type declaration.!!PPTypeGrammar methodsFor: 'grammar-composite types' stamp: 'EstebanAllende 12/5/2011 00:26'!complexType	^ basicType optional , ${ asParser smalltalkToken , methodSignatures , $} asParser smalltalkToken! !!PPTypeGrammar methodsFor: 'grammar-composite types' stamp: 'EstebanAllende 12/5/2011 00:35'!lambdaType	^ unaryType star , ('->' asParser / lambdaSpecialToken) smalltalkToken , unaryType! !!PPTypeGrammar methodsFor: 'grammar-composite types' stamp: 'EstebanAllende 12/5/2011 00:27'!methodSignature	^ selector , parenType! !!PPTypeGrammar methodsFor: 'grammar-composite types' stamp: 'EstebanAllende 12/16/2011 17:02'!methodSignatures	^ ((methodSignature , $. asParser smalltalkToken) star , methodSignature) ==> [:nodes| (nodes first collect: [:each|each first]) asOrderedCollection addLast: nodes second; yourself]! !!PPTypeGrammar methodsFor: 'grammar-generics'!genericDeclaration	^ $< asParser smalltalkToken, generics, $> asParser smalltalkToken! !!PPTypeGrammar methodsFor: 'grammar-generics' stamp: 'EstebanAllende 3/20/2012 16:29'!generics	^ ((type , $, asParser smalltalkToken) star , type) ==> [:nodes| (nodes first collect: [:each|each first]) asOrderedCollection addLast: nodes second; yourself]! !!PPTypeGrammar methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 10/5/2012 12:20'!basicType	^ (selfType / dynType / nominalClassType / nominalType / parametricType), genericDeclaration optional! !!PPTypeGrammar methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 12/5/2011 00:26'!dynType	^ $? asParser smalltalkToken! !!PPTypeGrammar methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 12/15/2011 19:04'!nominalClassType	^ (nominalIdentifier , 'class' asParser) smalltalkToken ! !!PPTypeGrammar methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 12/5/2011 00:29'!nominalType	^ nominalIdentifier! !!PPTypeGrammar methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 10/5/2012 12:22'!parametricType	^ parametricIdentifier, ('<:' asParser, type) optional! !!PPTypeGrammar methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 3/27/2012 17:31'!selfType	^ 'Self' asParser smalltalkToken, ('class' asParser / 'instance' asParser) smalltalkToken! !!PPTypeGrammar methodsFor: 'grammar-types'!compositeType	^ lambdaType / complexType / basicType! !!PPTypeGrammar methodsFor: 'grammar-types' stamp: 'EstebanAllende 12/5/2011 00:29'!parenType	^ $( asParser smalltalkToken , type , $) asParser smalltalkToken! !!PPTypeGrammar methodsFor: 'grammar-types' stamp: 'EstebanAllende 3/28/2012 15:11'!type	^ compositeType , ($| asParser smalltalkToken, compositeType) star! !!PPTypeGrammar methodsFor: 'grammar-types' stamp: 'EstebanAllende 12/5/2011 00:31'!unaryType	^ basicType / parenType! !!PPTypeGrammar methodsFor: 'token' stamp: 'EstebanAllende 12/5/2011 00:35'!lambdaSpecialToken	^ (Unicode charFromUnicode: 8594) asParser! !!PPTypeGrammar methodsFor: 'token' stamp: 'EstebanAllende 12/5/2011 00:28'!multipleKeywordToken	^keywordToken plus ==> [:tokens| PPSpecialSmalltalkToken on: tokens "PPSmalltalkToken on: (token inject: '' into: [:res :each| res, each value trimBoth])"]! !!PPTypeGrammar methodsFor: 'token' stamp: 'EstebanAllende 12/5/2011 00:29'!nominalIdentifier	^ (#uppercase asParser , #word asParser star) smalltalkToken! !!PPTypeGrammar methodsFor: 'token' stamp: 'EstebanAllende 10/5/2012 11:51'!parametricIdentifier	^ (#lowercase asParser , #word asParser star) smalltalkToken! !!PPTypeGrammar methodsFor: 'token' stamp: 'EstebanAllende 12/5/2011 00:30'!selector	^ multipleKeywordToken / unaryToken / binaryToken! !PPTypeGrammar subclass: #PPTypeParser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-TempSupport'!!PPTypeParser commentStamp: 'EstebanAllende 10/1/2012 15:17' prior: 0!A PPTypeParser is the parser of type declarations.!!PPTypeParser methodsFor: 'grammar-composite types' stamp: 'EstebanAllende 12/12/2011 12:24'!complexType	^ super complexType		==> [:nodes | StructuralType new base: (nodes first ifNil: [Object asType]);				 methods: nodes third]! !!PPTypeParser methodsFor: 'grammar-composite types' stamp: 'EstebanAllende 12/5/2011 11:48'!lambdaType	^ super lambdaType		==> [:nodes | 			| ltype |			ltype := LambdaType new.			ltype params: nodes first.			ltype return: nodes last.]! !!PPTypeParser methodsFor: 'grammar-composite types' stamp: 'EstebanAllende 12/12/2011 12:28'!methodSignature	^ super methodSignature		==> [:nodes | MethodSignature new selector: (nodes first) value asSymbol; signature: nodes last]! !!PPTypeParser methodsFor: 'grammar-generics' stamp: 'EstebanAllende 3/20/2012 16:37'!genericDeclaration	^ super genericDeclaration ==>[:nodes| nodes second]! !!PPTypeParser methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 3/20/2012 17:58'!basicType	^super basicType ==> [:nodes|nodes first classParametrics: nodes second]! !!PPTypeParser methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 12/5/2011 11:47'!dynType	^ super dynType		==> [:nodes | DynType explicitInstance]! !!PPTypeParser methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 12/5/2011 11:38'!nominalClassType	^ super nominalClassType		==> [:token | NominalType named: token value]! !!PPTypeParser methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 7/16/2012 02:16'!nominalType	^ super nominalType		==> [:token | UnlinkedType new name: token value asSymbol]! !!PPTypeParser methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 10/5/2012 12:26'!parametricType	"^ parametricIdentifier, ('<:' asParser, type) optional"	^ super parametricType		==> [:nodes | 				|res|				res := ParametricType new.				res kind: #unknown.				res name: nodes first value asSymbol.				nodes second ifNotNil: [res upperBound: nodes second second].				res			  ]! !!PPTypeParser methodsFor: 'grammar-ground types' stamp: 'EstebanAllende 12/5/2011 11:40'!selfType	^ super selfType		==> [:token | SelfType new kind: (token second ifNil: [#normal] ifNotNil: [token second value asSymbol])]! !!PPTypeParser methodsFor: 'grammar-types' stamp: 'EstebanAllende 12/12/2011 12:28'!parenType	^super parenType ==>[:nodes| nodes second]! !!PPTypeParser methodsFor: 'grammar-types' stamp: 'EstebanAllende 3/28/2012 15:18'!type	^super type ==>[:nodes| (nodes second size = 0) 							ifTrue:[nodes first]							ifFalse:[|col|								col := (nodes second collect: [:each| each second]) asOrderedCollection.								col addFirst: nodes first.								UnionType new union: col							].]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PPTypeParser class	instanceVariableNames: ''!!PPTypeParser class methodsFor: 'class initialization' stamp: 'EstebanAllende 12/16/2011 17:04'!initialize	TypeConfiguration uniqueInstance bootstrap ifFalse: [^self].	PPTypedSmalltalkGrammar typeGrammar: self new type.	PPTypedSmalltalkParser typeGrammar: self new type.	PPTypedSmalltalkParser typeParser: self new type.! !PPTypeParser initialize!