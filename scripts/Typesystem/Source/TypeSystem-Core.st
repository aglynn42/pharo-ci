Object subclass: #Type	uses: TTyped	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Core'!!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/15/2011 12:25'!(Boolean) = another       |(Type)a (Type)b ({simplify (→Type)})c|       another ifNil: [^false].       a:= self simplify.       [c := another] on: CastError do: [:ex | ^ false].       b:= c simplify.       ^[a typeEquality: b] on: CastError do: [:ex | false]! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/23/2011 12:02'!(Type) annotateSelfWith: (ClassDescription)aClass inMethod: (MethodSignature) aMethodSignature withKind: (Symbol) aSymbol	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/22/2011 11:37'!(NominalType) asNominalType	^nil! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/26/2012 14:43'!(StructuralType) asStructuralType	^nil! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/13/2011 18:38'!(Self) asType	^self! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) classType	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Integer) hash	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) instanceType	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Boolean) isConsistentSubtypeOf: (Type) aType	^Type is: self consistentSubtypeOf: aType! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Boolean) isSubtypeOf: (Type) aType	^Type is: self subtypeOf: aType! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Boolean) isType	^true! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/22/2011 12:06'!(Boolean) isValid	^self validate size = 0! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) pureType	^self	! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) replaceSelfWith: (Type) aType	^self subclassResponsibility.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) simplify	^self! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/13/2011 18:47'!(Boolean) typeEquality: (Self) another	<access: #protected>	^self subclassResponsibility.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 11:49'!(Type) typeOfSelector: (Symbol)selector fromClass: (ClassDescription) requestor	^self subclassResponsibility.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/22/2011 12:14'!(OrderedCollection) validate	^#() asOrderedCollection! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:19'!(Boolean) isDyn	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:19'!(Boolean) isLambda	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:19'!(Boolean) isNominal	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:20'!(Boolean) isSelf	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:20'!(Boolean) isStructural	^false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Type class	uses: TTyped classTrait	instanceVariableNames: '(Dictionary)subtypeRelations (Dictionary)consistentSubtypeRelations'!!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:12'!compilerContext	^OTCSupport defaultCompilerContext! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/30/2012 13:52'!(Type) defaultType	^TypeConfiguration uniqueInstance defaultType! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/12/2011 17:49'!(Self) initialize	OTCSupport bootstrapping ifFalse: [^self].	subtypeRelations := IdentityDictionary new.	consistentSubtypeRelations := IdentityDictionary new.! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/30/2012 14:00'!(Boolean) is: (Type) type1 consistentSubtypeOf: (Type) type2	^TypeConfiguration uniqueInstance consistentSubtypeRules is: type1 relatedWith: type2.! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 1/30/2012 14:00'!(Boolean) is: (Type) type1 subtypeOf: (Type) type2	^TypeConfiguration uniqueInstance subtypeRules is: type1 relatedWith: type2.! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:14'!(Self) registerConsistentSubtypeRelationBetween: (Class) aClass1 and: (Class) aClass2 using: (Type Type → Boolean) aBlock	|(Dictionary)cSubtypeClass1Dict|	cSubtypeClass1Dict := consistentSubtypeRelations at: aClass1 ifAbsentPut: [IdentityDictionary new].	cSubtypeClass1Dict at: aClass2 put: aBlock! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:14'!(Self) registerSubtypeRelationBetween: (Class) aClass1 and: (Class) aClass2 using: (Type Type → Boolean) aBlock	|(Dictionary)subtypeClass1Dict|	subtypeClass1Dict := subtypeRelations at: aClass1 ifAbsentPut: [IdentityDictionary new].	subtypeClass1Dict at: aClass2 put: aBlock! !Object subclass: #MethodDeclaration	uses: TTyped	instanceVariableNames: '(Type)type (Symbol)access'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Core'!!MethodDeclaration methodsFor: 'accessing' stamp: 'EstebanAllende 12/7/2011 11:00'!(Symbol) access	^ access! !!MethodDeclaration methodsFor: 'accessing' stamp: 'EstebanAllende 12/7/2011 11:00'!(Self) access: (Symbol) anObject	access := anObject! !!MethodDeclaration methodsFor: 'accessing' stamp: 'EstebanAllende 12/7/2011 11:00'!(Self) initialize	access := #public! !!MethodDeclaration methodsFor: 'accessing' stamp: 'EstebanAllende 12/7/2011 11:01'!(Type) type	^ type! !!MethodDeclaration methodsFor: 'accessing' stamp: 'EstebanAllende 12/7/2011 11:01'!(Self) type: (Type) anObject	type := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MethodDeclaration class	uses: TTyped classTrait	instanceVariableNames: ''!Object subclass: #TypeConfiguration	uses: TTyped	instanceVariableNames: 'defaultType subtypeRules consistentSubtypeRules (Boolean)typeTypesystem'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Core'!!TypeConfiguration methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:17'!(Boolean) bootstrap	^OTCSupport bootstrapping.! !!TypeConfiguration methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:17'!(Self) bootstrap: (Boolean)aBoolean	OTCSupport bootstrapping: aBoolean.	"Must reinitialize everything after changing bootstrap variable"	PPTypedSmalltalkGrammar initialize.	PPTypedSmalltalkParser initialize.	! !!TypeConfiguration methodsFor: 'accessing' stamp: 'EstebanAllende 1/30/2012 13:58'!consistentSubtypeRules	^ consistentSubtypeRules! !!TypeConfiguration methodsFor: 'accessing' stamp: 'EstebanAllende 1/30/2012 13:58'!consistentSubtypeRules: anObject	consistentSubtypeRules := anObject! !!TypeConfiguration methodsFor: 'accessing' stamp: 'EstebanAllende 1/30/2012 13:50'!(Type)defaultType	^defaultType! !!TypeConfiguration methodsFor: 'accessing' stamp: 'EstebanAllende 1/30/2012 13:53'!(Self)defaultType: (Type)aType	defaultType := aType.	PPTypedSmalltalkParser dynType: aType.! !!TypeConfiguration methodsFor: 'accessing' stamp: 'EstebanAllende 1/30/2012 13:58'!subtypeRules	^ subtypeRules! !!TypeConfiguration methodsFor: 'accessing' stamp: 'EstebanAllende 1/30/2012 13:58'!subtypeRules: anObject	subtypeRules := anObject! !!TypeConfiguration methodsFor: 'accessing' stamp: 'EstebanAllende 12/7/2011 02:17'!(Boolean)typeTypesystem	^ typeTypesystem! !!TypeConfiguration methodsFor: 'accessing' stamp: 'EstebanAllende 12/7/2011 02:17'!(Self) typeTypesystem: (Boolean)anObject	typeTypesystem := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TypeConfiguration class	uses: TTyped classTrait	instanceVariableNames: '(TypeConfiguration)uniqueInstance'!!TypeConfiguration class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/12/2011 17:50'!(Self) initialize	OTCSupport bootstrapping ifFalse: [^self].	uniqueInstance := self new.! !!TypeConfiguration class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:18'!(TypeConfiguration) uniqueInstance	^uniqueInstance! !Object subclass: #TypeDictionary	uses: TTyped	instanceVariableNames: '(Dictionary)classes'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Core'!!TypeDictionary methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 11:50'!(Type) class:(ClassDescription) aClass atClassVar: (Symbol)varName	|(Dictionary)dict (ClassDescription)defclass|	defclass := aClass classThatDefinesClassVariable: varName.	defclass ifNil: [^nil].	dict := classes at: defclass name asSymbol ifAbsentPut: [self emptyClassDictionary].	^(dict at: #cvars) at: varName ifAbsentPut: [Type defaultType]! !!TypeDictionary methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 11:50'!(Type) class:(ClassDescription) aClass atClassVar: (Symbol)varName putType: (Type) aType	|(Dictionary)dict (ClassDescription)defclass|	defclass := aClass classThatDefinesClassVariable: varName.	defclass ifNil: [^nil].	dict := classes at: defclass name asSymbol ifAbsentPut: [self emptyClassDictionary].	^(dict at: #cvars) at: varName put: aType.! !!TypeDictionary methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 11:51'!(Type) class:(ClassDescription) aClass atInstVar: (Symbol)varName	|(Dictionary)dict (ClassDescription)defclass|	defclass := aClass classThatDefinesInstanceVariable: varName.	defclass ifNil: [^nil].	dict := classes at: defclass name asSymbol ifAbsentPut: [self emptyClassDictionary].	^(dict at: #ivars) at: varName ifAbsentPut: [Type defaultType]! !!TypeDictionary methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 11:51'!(Type) class: (ClassDescription)aClass atInstVar: (Symbol)varName putType: (Type)aType	|(Dictionary)dict (ClassDescription)defclass|	defclass := aClass classThatDefinesInstanceVariable: varName.	defclass ifNil: [^nil].	dict := classes at: defclass name asSymbol ifAbsentPut: [self emptyClassDictionary].	^(dict at: #ivars) at: varName put: aType! !!TypeDictionary methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 11:52'!(Type) class: (ClassDescription)aClass atSelector: (Symbol)aSelector fromClass: (ClassDescription)requestor	|(Dictionary)dict (ClassDescription)defclass (MethodDeclaration) md (Symbol)access|	defclass := self definingClassOfMethod: aSelector startingInClass: aClass.	defclass ifNil: [^nil].	dict := classes at: defclass name asSymbol ifAbsentPut: [self emptyClassDictionary].	md := (dict at: #methods) at: aSelector ifAbsentPut: [ |(CompiledMethod)mth (MethodDeclaration)dmd (OrderedCollection) params|		mth:=aClass lookupSelector: aSelector.		mth ifNil: [^nil]. 		dmd := MethodDeclaration new.		params := ((1 to: mth numArgs) collect: [:(Integer)i|Type defaultType]).		dmd type: (params -> Type defaultType) asType.	].	access := md access.	(access = #public) ifTrue: [^md type].	((access = #private) and: [defclass = requestor]) ifTrue: [^md type].	((access = #protected) and: [(defclass = requestor) or: [requestor inheritsFrom: defclass] ]) ifTrue: [^md type].	^nil.! !!TypeDictionary methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/21/2011 17:30'!(Self) class: (ClassDescription)aClass atSelector: (Symbol)aSelector putMethodDeclaration: (MethodDeclaration)md	|(Dictionary)dict|	dict := classes at: aClass name asSymbol ifAbsentPut: [self emptyClassDictionary].	md := (dict at: #methods) at: aSelector put: md.! !!TypeDictionary methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 11:51'!(ClassDescription) definingClassOfMethod: (Symbol)aMethod startingInClass: (ClassDescription)aClass		|(CompiledMethod) compiledMethod |	compiledMethod := aClass lookupSelector: aMethod.	compiledMethod ifNil: [^nil].	^compiledMethod classBinding value.! !!TypeDictionary methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 10:58'!(Dictionary) emptyClassDictionary	^ Dictionary newFrom: {#methods -> Dictionary new . #ivars -> Dictionary new . #cvars -> Dictionary new}! !!TypeDictionary methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 11:52'!(Self) emptyVariableDictionaryInClass: (ClassDescription) aClass	|(Dictionary)dict|	dict := classes at: aClass ifAbsent: [^self].	dict at: #cvars put: Dictionary new.	dict at: #ivars put: Dictionary new.! !!TypeDictionary methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 10:59'!(Self) initialize	classes := IdentityDictionary new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TypeDictionary class	uses: TTyped classTrait	instanceVariableNames: '(TypeDictionary)uniqueInstance'!!TypeDictionary class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/12/2011 17:50'!(Self) initialize	OTCSupport bootstrapping ifFalse: [^self].	uniqueInstance := self new.! !!TypeDictionary class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 10:59'!(TypeDictionary) uniqueInstance	^uniqueInstance! !Type initialize!TypeConfiguration initialize!TypeDictionary initialize!