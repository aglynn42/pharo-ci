Error subclass: #TypecheckerError	instanceVariableNames: 'sourceRef'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Errors'!!TypecheckerError methodsFor: 'accessing' stamp: 'OzC 9/13/2012 16:23'!sourceRef	^ sourceRef! !!TypecheckerError methodsFor: 'accessing' stamp: 'OzC 9/13/2012 16:23'!sourceRef: anObject	sourceRef := anObject! !!TypecheckerError methodsFor: 'exceptiondescription' stamp: 'EstebanAllende 12/5/2011 17:04'!defaultAction	self inform: self messageText.	self return.! !!TypecheckerError methodsFor: 'browser' stamp: 'OzC 9/17/2012 01:28'!browse 	sourceRef ifNil: [ super browse		] ifNotNil: [ sourceRef browse ]! !!TypecheckerError methodsFor: 'as yet unclassified' stamp: 'OzC 9/17/2012 01:44'!printOn: stream.	sourceRef ifNotNil: [		sourceRef printOn: stream.		stream nextPutAll: '  ---  '].	super printOn: stream.! !TypecheckerError subclass: #TypeValidationError	instanceVariableNames: 'kind'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Errors'!!TypeValidationError methodsFor: 'accessing' stamp: 'EstebanAllende 12/22/2011 12:54'!kind	^ kind! !!TypeValidationError methodsFor: 'accessing' stamp: 'EstebanAllende 12/22/2011 12:54'!kind: anObject	kind := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TypeValidationError class	instanceVariableNames: ''!!TypeValidationError class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/22/2011 12:54'!kind: aSymbol msg: aMsg	|res|	res := self new.	res kind: aSymbol.	res messageText: aMsg.	^res.! !Object subclass: #TSSourceRef	instanceVariableNames: 'classRef selector startPosition endPosition'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Errors'!!TSSourceRef methodsFor: 'accessing' stamp: 'OzC 9/17/2012 01:07'!classRef	^ classRef! !!TSSourceRef methodsFor: 'accessing' stamp: 'OzC 9/17/2012 01:07'!classRef: anObject	classRef := anObject! !!TSSourceRef methodsFor: 'accessing' stamp: 'OzC 9/13/2012 16:23'!endPosition	^ endPosition! !!TSSourceRef methodsFor: 'accessing' stamp: 'OzC 9/13/2012 16:23'!endPosition: anObject	endPosition := anObject! !!TSSourceRef methodsFor: 'accessing' stamp: 'OzC 9/17/2012 01:07'!selector	^ selector! !!TSSourceRef methodsFor: 'accessing' stamp: 'OzC 9/17/2012 01:07'!selector: anObject	selector := anObject! !!TSSourceRef methodsFor: 'accessing' stamp: 'OzC 9/13/2012 16:23'!startPosition	^ startPosition! !!TSSourceRef methodsFor: 'accessing' stamp: 'OzC 9/13/2012 16:23'!startPosition: anObject	startPosition := anObject! !!TSSourceRef methodsFor: 'printing' stamp: 'OzC 9/17/2012 01:22'!printOn: stream	stream 	nextPutAll: classRef printString;			nextPutAll: '>>';			nextPutAll: selector ;			nextPutAll: ' (';		   	nextPutAll: startPosition printString ;		      nextPut: $, ;		      nextPutAll: endPosition printString ;		      nextPut: $).! !!TSSourceRef methodsFor: 'browser' stamp: 'OzC 9/17/2012 01:26'!browse	|browser|	browser := SystemBrowser default newOnClass: classRef selector: selector.	browser codeTextMorph selectFrom: startPosition  to: endPosition ; changed.	^browser! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TSSourceRef class	instanceVariableNames: ''!!TSSourceRef class methodsFor: 'as yet unclassified' stamp: 'OzC 9/13/2012 16:25'!from: start to: end	^ self new startPosition: start; endPosition: end ; yourself ! !!TSSourceRef class methodsFor: 'as yet unclassified' stamp: 'OzC 9/17/2012 01:08'!refFor: cls at: selector from: start to: end	^ self new classRef: cls ; selector: selector ; startPosition: start; endPosition: end ; yourself ! !Error subclass: #CastError	instanceVariableNames: 'class selector ctx from to'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Errors'!!CastError methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 8/14/2012 17:55'!ctx: aContextPart	ctx := aContextPart! !!CastError methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 8/14/2012 18:09'!defaultAction	"The user should be notified of the occurrence of an exceptional occurrence and given an option of continuing or aborting the computation. The description of the occurrence should include any text specified as the argument of the #signal: message."	"Smalltalk tools"	self initializeFromContext: ctx.	Smalltalk tools debugger		openContext: thisContext		label: 'Cast error'		contents: self messageText, '\\Select Proceed to show the blamed expression, or close this window to cancel the operation.' withCRs.	self showBlame.	self return.! !!CastError methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/23/2011 12:57'!initializeFromContext: aContext	|interval|	class := aContext method methodClass.	selector := aContext method selector.	interval := class compilerContext compiler methodCompiler mapActiveContextToSource: aContext.	from := interval first.	to := interval last.! !!CastError methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/5/2011 17:05'!showBlame	|browser|	class ifNil: [^self inform: 'No enough information to blame someone'].	selector ifNil: [^self inform: 'No enough information to blame someone'].	browser := SystemBrowser default newOnClass: class selector: selector.	(from  notNil ) & (to notNil) ifTrue: [browser codeTextMorph selectFrom: from to: to; changed].	^browser	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CastError class	instanceVariableNames: ''!!CastError class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 8/14/2012 18:09'!signal: aString blaming: aContext	|err|	err := self new.	err ctx: aContext.	"err initializeFromContext: aContext"	^err signal: aString.! !Error subclass: #ResolveError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Errors'!