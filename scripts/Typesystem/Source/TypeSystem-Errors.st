Error subclass: #CastError	instanceVariableNames: 'class selector from to'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Errors'!!CastError methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/5/2011 17:08'!defaultAction	"The user should be notified of the occurrence of an exceptional occurrence and given an option of continuing or aborting the computation. The description of the occurrence should include any text specified as the argument of the #signal: message."	Smalltalk tools		debugContext: ([:x|x] asContext)		label: 'Cast error'		contents: self messageText, '\\Select Proceed to show the blamed expression, or close this window to cancel the operation.' withCRs.	self showBlame.	self return.! !!CastError methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/23/2011 12:57'!initializeFromContext: aContext	|interval|	class := aContext method methodClass.	selector := aContext method selector.	interval := class compilerContext compiler methodCompiler mapActiveContextToSource: aContext.	from := interval first.	to := interval last.! !!CastError methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/5/2011 17:05'!showBlame	|browser|	class ifNil: [^self inform: 'No enough information to blame someone'].	selector ifNil: [^self inform: 'No enough information to blame someone'].	browser := SystemBrowser default newOnClass: class selector: selector.	(from  notNil ) & (to notNil) ifTrue: [browser codeTextMorph selectFrom: from to: to; changed].	^browser	! !Error subclass: #ResolveError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Errors'!Error subclass: #TypecheckerError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Errors'!!TypecheckerError methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/5/2011 17:04'!defaultAction	self inform: self messageText.	self return.! !TypecheckerError subclass: #TypeValidationError	instanceVariableNames: 'kind'	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Errors'!!TypeValidationError methodsFor: 'accessing' stamp: 'EstebanAllende 12/22/2011 12:54'!kind	^ kind! !!TypeValidationError methodsFor: 'accessing' stamp: 'EstebanAllende 12/22/2011 12:54'!kind: anObject	kind := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TypeValidationError class	instanceVariableNames: ''!!TypeValidationError class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/22/2011 12:54'!kind: aSymbol msg: aMsg	|res|	res := self new.	res kind: aSymbol.	res messageText: aMsg.	^res.! !