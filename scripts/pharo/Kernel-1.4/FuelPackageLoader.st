SystemOrganization addCategory: #FuelPackageLoader!SystemOrganization addCategory: #'FuelPackageLoader-Mappers'!SystemOrganization addCategory: #'FuelPackageLoader-Metacello'!!Association methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 9/24/2011 11:26'!rebindOn: aCompiledMethod at: index	"If the CompiledMethod was saved with a reference to a class that does exist, then its calculated binding will be nil. In that case we prefer to keep the original association."	(aCompiledMethod methodClass bindingOf: key)		ifNotNil: [:aBinding |			aCompiledMethod literalAt: index put: aBinding]! !!Class methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 8/22/2011 21:16'!cleanUpClassVariables	self classPool keys do: [ :key | classPool at: key put: nil ]! !!Class methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 8/22/2011 21:41'!cleanUpInstanceVariables	Class instSize + 1 to: self class instSize do:		[:offset | self instVarAt: offset put: nil].! !!Class methodsFor: '*FuelPackageLoader' stamp: 'MarianoMartinezPeck 9/23/2011 16:44'!copyWithLocalProtocol	| copy |	copy := self copy.	copy organization: organization deepCopy.	copy environment: environment.	copy basicCategory: category.				copy traitComposition: self traitComposition.	copy classSide traitComposition: self classSide traitComposition.		copy removeForeignProtocol.	copy classSide removeForeignProtocol.		copy cleanUpClassVariables.	copy cleanUpInstanceVariables.		^copy! !!Class methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 8/22/2011 02:53'!fuelSubstitution	^self copyWithLocalProtocol ! !!Class methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 9/29/2011 01:30'!initializeOnLoad	(self class includesSelector: #initialize)		ifTrue: [self initialize]! !!Class methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 9/29/2011 01:29'!rebindOnLoad	self rebindMethodDictionary.	self class rebindMethodDictionary! !!Class methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 9/29/2011 01:29'!registerOnLoad	superclass addSubclass: self. "Note that aClass could already be between its superclass subclasses, #addSubclass: is prepared for that case."	Smalltalk globals at: self name put: self.	Smalltalk globals organization classify: self name under: self basicCategory.! !FLDefaultMapper subclass: #FLPackageLoaderDefaultMapper	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FuelPackageLoader-Mappers'!!FLPackageLoaderDefaultMapper commentStamp: 'MartinDias 8/24/2011 00:08' prior: 0!I am like the default mapper but with a special behavior with classes. I store a copy each class with just the local protocol.!!FLPackageLoaderDefaultMapper methodsFor: 'initialize-release' stamp: 'MarianoMartinezPeck 9/23/2011 16:44'!initialize	super initialize.	compiledMethodCluster := FLCompiledMethodCluster withNoSource.	namedCompiledMethodCluster := FLNamedPrimitiveMethodCluster withNoSource.! !!FLPackageLoaderDefaultMapper methodsFor: 'visiting' stamp: 'MartinDias 8/24/2011 00:18'!visitClass: aClass  	^(Smalltalk globals includes: aClass)		ifTrue: [ super visitSubstitution: aClass ]		ifFalse: [ super visitClass: aClass ]! !!CompiledMethod methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 9/22/2011 02:10'!rebindLiteralAt: index	(self literalAt: index) rebindOn: self at: index! !!CompiledMethod methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 9/22/2011 02:07'!rebindLiterals 	1 to: self numLiterals-2		do: [ :index | self rebindLiteralAt: index ]! !FLAnalyzer subclass: #FLPackageAnalyzer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FuelPackageLoader'!!FLPackageAnalyzer methodsFor: 'defaults' stamp: 'MartinDias 9/13/2011 21:59'!defaultMapper	^FLPackageLoaderDefaultMapper new! !!TClassAndTraitDescription methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 8/22/2011 00:27'!removeCategorySilently: aCategory	SystemChangeNotifier uniqueInstance doSilently: [ self removeCategory: aCategory ]! !!ClassOrganizer methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 8/22/2011 01:32'!removeCategorySilently: cat 	super removeCategory: cat! !!Behavior methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 9/22/2011 15:35'!rebindMethodDictionary	self methodDict valuesDo: [ :aCompiledMethod | 		aCompiledMethod 			methodClass: self;			rebindLiterals. ]! !Object subclass: #FLMetacelloStore	instanceVariableNames: 'prefix capturing capturedPackageNames'	classVariableNames: ''	poolDictionaries: ''	category: 'FuelPackageLoader-Metacello'!FLMetacelloStore class	instanceVariableNames: 'default'!!FLMetacelloStore commentStamp: 'MartinDias 8/23/2011 19:06' prior: 0!I capture and export in Fuel files a Metacello load.Example: loading Seaside 31) Install Fuel in a CLEAN Pharo 1.2.1 image:Gofer new squeaksource: 'Fuel'; 	package: 'Fuel';	package: 'FuelTests';	package: 'FuelPackageLoader';	load.2) Load the configuration you want to capture in this way:FLMetacelloStore default 	capturePackagesDuring: [		Gofer new squeaksource: 'MetacelloRepository'; package: 'ConfigurationOfSeaside30'; load.		(Smalltalk at: #ConfigurationOfSeaside30) project latestVersion load: #(Core)] 	prefixed: 'seaside'.= Load =1) Install Fuel:Gofer new squeaksource: 'Fuel'; 	package: 'Fuel';	package: 'FuelTests';	package: 'FuelPackageLoader';	load.2) "Now run the loading script generated: copy and paste in a workspace the content of 'seaside-load-script.txt'."3) "Start the server"WAComancheAdaptor startOn: 8088.!FLMetacelloStore class	instanceVariableNames: 'default'!!FLMetacelloStore class methodsFor: 'instance creation' stamp: 'MartinDias 8/23/2011 06:35'!default	^default ifNil: [default := self new]! !!FLMetacelloStore methodsFor: 'exporting' stamp: 'MartinDias 8/23/2011 18:47'!capturePackages: packageNames	packageNames		do: [:packageName |			capturedPackageNames add: packageName.			self outputFileNamed: (self packageFileNameFor: packageName) 				do: [ :aStream | FLPackageStore new storeOn: aStream binary packageNamed: packageName ] ]		displayingProgress: [:packageName | 'Capturing ', (self packageFileNameFor: packageName)]	! !!FLMetacelloStore methodsFor: 'exporting' stamp: 'MartinDias 8/23/2011 18:47'!capturePackagesDuring: aBlock prefixed: aPrefix	capturedPackageNames := OrderedCollection new.	prefix := aPrefix.	capturing := true.	aBlock value.	capturing := false.	self writeLoadScript.! !!FLMetacelloStore methodsFor: 'initialize-release' stamp: 'MartinDias 8/23/2011 18:10'!initialize 	super initialize.	capturing := false.! !!FLMetacelloStore methodsFor: 'streaming' stamp: 'MartinDias 8/23/2011 18:05'!outputDirectory	^(FileDirectory default directoryNamed: 'FuelMetacello') 		assureExistence;		yourself! !!FLMetacelloStore methodsFor: 'streaming' stamp: 'MartinDias 8/23/2011 17:58'!outputFileNamed: aFileName do: aBlock	^self outputDirectory forceNewFileNamed: aFileName do: aBlock! !!FLMetacelloStore methodsFor: 'exporting' stamp: 'MartinDias 8/23/2011 13:59'!packageFileNameFor: packageName 	^prefix, '-', packageName, '.fuel'! !!FLMetacelloStore methodsFor: 'streaming' stamp: 'MartinDias 8/23/2011 18:47'!packageFileNames	^capturedPackageNames collect: [:packageName | self packageFileNameFor: packageName]! !!FLMetacelloStore methodsFor: 'listening' stamp: 'MartinDias 8/23/2011 18:09'!packagesHasBeenLoaded: packageNames	capturing ifTrue: [ self capturePackages: packageNames]! !!FLMetacelloStore methodsFor: 'exporting' stamp: 'MartinDias 8/23/2011 17:39'!scriptFileName		^prefix, '-load-script.txt'! !!FLMetacelloStore methodsFor: 'exporting' stamp: 'MartinDias 8/23/2011 18:48'!scriptString	^ self packageFileNames asArray printString, '	do: [ :packageFileName | 		(FileDirectory default directoryNamed: ''FuelMetacello'') 			oldFileNamed: packageFileName 			do: [ :aStream | FLPackageLoader new loadFrom: aStream binary ]]	displayingProgress: [ :packageFileName | ''Fuel importing '', packageFileName ]'! !!FLMetacelloStore methodsFor: 'exporting' stamp: 'MartinDias 8/23/2011 18:05'!writeLoadScript	self 		outputFileNamed: self scriptFileName 		do: [ :scriptStream | scriptStream nextPutAll: self scriptString ].! !Object subclass: #FLMethodExtension	instanceVariableNames: 'method category'	classVariableNames: ''	poolDictionaries: ''	category: 'FuelPackageLoader'!!FLMethodExtension class methodsFor: 'instance creation' stamp: 'MartinDias 9/29/2011 01:53'!with: aCompiledMethod	^ self basicNew		initializeWith: aCompiledMethod;		yourself ! !!FLMethodExtension methodsFor: 'accessing' stamp: 'MartinDias 3/26/2011 04:40'!category	^ category! !!FLMethodExtension methodsFor: 'initialize-release' stamp: 'MartinDias 9/29/2011 01:52'!initializeWith: aCompiledMethod	self initialize.	method := aCompiledMethod.	category := aCompiledMethod category.! !!FLMethodExtension methodsFor: 'loading' stamp: 'MartinDias 9/22/2011 15:39'!load	method rebindLiterals.	method methodClass addSelectorSilently: method selector withMethod: method.	method methodClass organization classify: method selector under: category.	! !!FLMethodExtension methodsFor: 'accessing' stamp: 'MartinDias 3/26/2011 04:40'!method	^ method! !Object subclass: #FLPackage	instanceVariableNames: 'extensionMethods classes'	classVariableNames: ''	poolDictionaries: ''	category: 'FuelPackageLoader'!!FLPackage class methodsFor: 'private' stamp: 'MartinDias 8/22/2011 02:53'!classesLocalTo: packageInfo	^ packageInfo classes! !!FLPackage class methodsFor: 'private' stamp: 'MartinDias 8/21/2011 19:21'!extensionMethodsTo: packageInfo	^ packageInfo extensionMethods 		collect: [ :reference | FLMethodExtension with: reference compiledMethod ]! !!FLPackage class methodsFor: 'instance creation' stamp: 'MartinDias 9/29/2011 00:09'!named: packageName	| packageInfo |	packageInfo := PackageInfo named: packageName.	^ self basicNew		initializeWithClasses: (self classesLocalTo: packageInfo) 		extensionMethods: (self extensionMethodsTo: packageInfo);		yourself! !!FLPackage methodsFor: 'accessing' stamp: 'MartinDias 8/21/2011 19:10'!classes	^ classes! !!FLPackage methodsFor: 'accessing' stamp: 'MartinDias 3/26/2011 03:35'!extensionMethods	^ extensionMethods! !!FLPackage methodsFor: 'loading' stamp: 'MartinDias 9/29/2011 00:10'!initializeWithClasses: someClasses extensionMethods: someExtensionMethods	self initialize.	classes := someClasses.	extensionMethods := someExtensionMethods.! !!FLPackage methodsFor: 'loading' stamp: 'MartinDias 9/29/2011 01:30'!load	self classes do: [:aClass | aClass registerOnLoad].	Smalltalk globals flushClassNameCache.	self classes do: [:aClass | aClass rebindOnLoad].	self classes do: [:aClass | 		aClass initializeOnLoad.		self notifyClassAddition: aClass.].	self loadExtensionMethods.	Behavior flushObsoleteSubclasses! !!FLPackage methodsFor: 'loading' stamp: 'MartinDias 3/26/2011 04:44'!loadExtensionMethods		extensionMethods do: [ :extensionMethod | extensionMethod load ]! !!FLPackage methodsFor: 'loading' stamp: 'MarianoMartinezPeck 9/23/2011 15:03'!notifyClassAddition: aClass	SystemChangeNotifier uniqueInstance classAdded: aClass inCategory: aClass category asSymbol.	! !Object subclass: #FLPackageLoader	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FuelPackageLoader'!!FLPackageLoader methodsFor: 'loading' stamp: 'MartinDias 9/13/2011 22:01'!loadFrom: aStream 	| package |	package := (FLMaterializer newDefault materializeFrom: aStream) root.	package load.	^ package.! !Object subclass: #FLPackageStore	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FuelPackageLoader'!!FLPackageStore methodsFor: 'storing' stamp: 'MartinDias 9/13/2011 22:02'!storeOn: aStream packageNamed: name 	| package |	package := FLPackage named: name.	(FLSerializer newDefault)		analyzer: (FLPackageAnalyzer newDefault 			considerInternalAll: package classes; 			considerGlobalWhenPossible;			yourself);		serialize: package on: aStream.! !!Object methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 9/22/2011 02:12'!rebindOn: aCompiledMethod at: index	"Nothing to do."! !!ClassDescription methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 8/22/2011 02:42'!foreignCategories		^self organization categories select: [ :aCategory | aCategory beginsWith: '*' ]! !!ClassDescription methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 8/22/2011 01:50'!removeCategorySilently: aCategory	(organization listAtCategoryNamed: aCategory) do: [ :aSelector | self removeSelectorSilently: aSelector ].	organization removeCategorySilently: aCategory.! !!ClassDescription methodsFor: '*FuelPackageLoader' stamp: 'MartinDias 8/22/2011 03:05'!removeForeignProtocol	self foreignCategories do: [ :aCategory |		self removeCategorySilently: aCategory ]! !