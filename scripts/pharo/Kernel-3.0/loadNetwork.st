[	log := FileStream stdout.old := Undeclared copy.oldCalls := SystemNavigation default allUnimplementedCalls.lastCalls := oldCalls.#(  'Zinc-Resource-Meta-Core'  'Zinc-Character-Encoding-Core'  'Network-Kernel'   'Network-MIME'   'Network-UUID'   'Network-Url'   'Network-URI'   'Network-Protocols'  'Zinc-HTTP'   'Zinc-Patch-HTTPSocket'   'Settings-Network') do: [:package|  log nextPutAll: 'loading ', package, '...'; lf.  CodeImporter evaluateReadStream: (package, '.st') asFileReference readStream.  log nextPutAll: package, ' loaded'; lf.  log nextPutAll: 'New Undeclared:'; lf.  log nextPutAll: (Undeclared copyWithoutAll: old) asString; lf.  log nextPutAll: 'New unimplemented calls:'; lf.  unimplemented := SystemNavigation default allUnimplementedCalls.  log nextPutAll: (unimplemented copyWithoutAll: lastCalls) asString; lf.  lastCalls := unimplemented.  log nextPutAll: 'Unimplemented calls:'; lf.  log nextPutAll: (unimplemented copyWithoutAll: oldCalls) asString; lf; lf.]."(Smalltalk globals at: #Gofer) it  squeaksource: 'Pharo';  package: 'SUnit';  load."log close.SmalltalkImage current snapshot: true andQuit: true.] ifError: [:e |	| rep |	rep := FileStream forceNewFileNamed: 'PharoDebug.log'.	rep nextPutAll: 'loadGofer.st'; cr.	rep nextPutAll: 'Error:'; cr.	rep nextPutAll: e asString; cr.	rep nextPutAll: thisContext stack size asString; cr."	rep nextPutAll: ((thisContext stack copy at: 12) tempsAndValues ) asString; cr."	thisContext stack copy withIndexDo: [:stck :i |		[rep nextPutAll: i asString; space; nextPutAll: stck asString; cr] ifError: [:er | rep nextPutAll: er asString; cr]].	rep close. 	Smalltalk exitFailure.]  ! 