Author fullName: 'Hazelnut Monkey'.Gofer it    url: 'http://www.smalltalkhub.com/mc/Guille/Seed/main';    package: 'ConfigurationOfHazelnut';    load.    (Smalltalk at: #ConfigurationOfHazelnut) loadBleedingEdge. !Object subclass: #JenkinsSeedReport  instanceVariableNames: ''  classVariableNames: ''  poolDictionaries: ''  category: 'JenkinsSeedBuildTools'!!JenkinsSeedReport methodsFor: 'private' stamp: 'lr 5/15/2010 14:27'!convert: aString  ^ (aString asString     copyReplaceAll: (String with: Character cr with: Character lf) with: (String with: Character lf))    copyReplaceAll: (String with: Character cr) with: (String with: Character lf)! !!JenkinsSeedReport methodsFor: 'private' stamp: 'lr 5/14/2010 08:36'!encode: aString  ^ ((aString asString     copyReplaceAll: '&' with: '&amp;')     copyReplaceAll: '"' with: '&quot;')     copyReplaceAll: '<' with: '&lt;'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JenkinsSeedReport class  instanceVariableNames: ''!!JenkinsSeedReport class methodsFor: 'running' stamp: 'lr 5/14/2010 09:17'!runCategories: aCollectionOfStrings  ^ aCollectionOfStrings do: [ :each | self runCategory: each ]! !!JenkinsSeedReport class methodsFor: 'running' stamp: 'lr 5/14/2010 09:17'!runCategory: aString  ^ self runClasses: (Smalltalk organization classesInCategory: aString) named: aString! !!JenkinsSeedReport class methodsFor: 'running' stamp: 'lr 5/14/2010 09:15'!runClasses: aCollectionOfClasses named: aString  self subclassResponsibility! !JenkinsSeedReport subclass: #JenkinsSeedTestReport  instanceVariableNames: 'suite stream suitePosition suiteTime suiteFailures suiteErrors'  classVariableNames: ''  poolDictionaries: ''  category: 'JenkinsSeedBuildTools'!!JenkinsSeedTestReport methodsFor: 'private' stamp: 'lr 6/6/2010 18:44'!beginTestCase: aTestCase time: time  stream tab; nextPutAll: '<testcase classname="'; nextPutAll: (self encode: (aTestCase class category copyReplaceAll: '-' with: '.')); nextPut: $.; nextPutAll: (self encode: aTestCase class name); nextPutAll: '" name="'; nextPutAll: (self encode: aTestCase selector); nextPutAll: '" time="'; print: time / 1000.0; nextPutAll: '">'; nextPut: Character lf! !!JenkinsSeedTestReport methodsFor: 'private' stamp: 'lr 6/6/2010 18:45'!endTestCase  stream tab; nextPutAll: '</testcase>'; nextPut: Character lf! !!JenkinsSeedTestReport methodsFor: 'private' stamp: 'pmm 6/6/2010 18:13'!stackTraceString: err of: aTestCase  ^ String streamContents: [ :str |     | context |    context := err signalerContext.    [ context isNil or: [ context receiver == aTestCase and: [ context methodSelector == #runCase ] ] ] whileFalse: [      str print: context; nextPut: Character lf.      context := context sender ] ] ! !!JenkinsSeedTestReport methodsFor: 'private' stamp: 'lr 6/9/2010 10:32'!writeError: error stack: stack  suiteErrors := suiteErrors + 1.  stream tab; tab; nextPutAll: '<error type="'; nextPutAll: (self encode: error class name); nextPutAll: '" message="'; nextPutAll: (self encode: (error messageText ifNil: [ error description ])); nextPutAll: '">'; nextPutAll: (self encode: stack); nextPutAll: '</error>'; nextPut: Character lf! !!JenkinsSeedTestReport methodsFor: 'private' stamp: 'lr 6/9/2010 10:33'!writeFailure: error stack: stack  suiteFailures := suiteFailures + 1.  stream tab; tab; nextPutAll: '<failure type="'; nextPutAll: (self encode: error class name); nextPutAll: '" message="'; nextPutAll: (self encode: (error messageText ifNil: [ error description ])); nextPutAll: '">'; nextPutAll: (self encode: stack); nextPutAll: '</failure>'; nextPut: Character lf! !!JenkinsSeedTestReport methodsFor: 'initialization' stamp: 'lr 1/10/2010 10:22'!initializeOn: aTestSuite  suite := aTestSuite.  suitePosition := suiteTime := suiteFailures := suiteErrors := 0! !!JenkinsSeedTestReport methodsFor: 'running' stamp: 'lr 6/9/2010 20:01'!run  Author uniqueInstance    ifUnknownAuthorUse: 'hudson'    during: [ [       self setUp.      suiteTime := [ self runAll ]        timeToRun ]          ensure: [ self tearDown ] ]! !!JenkinsSeedTestReport methodsFor: 'running' stamp: 'JohanBrichau 10/25/2010 23:05'!runAll  suite tests do: [ :each | each run: self ]! !!JenkinsSeedTestReport methodsFor: 'running' stamp: 'lr 11/24/2010 20:44'!runCase: aTestCase  | error time stack |  time := [ [ aTestCase runCase ]     on: Halt , Error, TestFailure    do: [ :err |      error := err.      stack := self stackTraceString: err of: aTestCase ] ]      timeToRun.  self beginTestCase: aTestCase time: time.  (error isNil or: [ aTestCase expectedFailures includes: aTestCase selector ]) ifFalse: [    (error isKindOf: TestFailure)      ifTrue: [ self writeError: error stack: stack ]      ifFalse: [ self writeError: error stack: stack ] ].  self endTestCase! !!JenkinsSeedTestReport methodsFor: 'running' stamp: 'lr 5/15/2010 14:47'!setUp  stream := StandardFileStream forceNewFileNamed: suite name , '-Test.xml'.  stream nextPutAll: '<?xml version="1.0" encoding="UTF-8"?>'; nextPut: Character lf.  stream nextPutAll: '<testsuite name="'; nextPutAll: (self encode: suite name); nextPutAll: '" tests="'; print: suite tests size; nextPutAll: '">'.    "Now this is ugly. We want to update the time and the number of failures and errors, but still at the same time stream a valid XML. So remember this position and add some whitespace, that we can fill later."  suitePosition := stream position - 1.  stream nextPutAll: (String new: 100 withAll: $ ); nextPut: Character lf.    "Initialize the test resources."  suite resources do: [ :each |    each isAvailable      ifFalse: [ each signalInitializationError ] ]! !!JenkinsSeedTestReport methodsFor: 'running' stamp: 'lr 5/15/2010 14:47'!tearDown  suite resources     do: [ :each | each reset ].      stream tab; nextPutAll: '<system-out><!![CDATA[]]></system-out>'; nextPut: Character lf.  stream tab; nextPutAll: '<system-err><!![CDATA[]]></system-err>'; nextPut: Character lf.  stream nextPutAll: '</testsuite>'.    stream position: suitePosition.  stream nextPutAll: ' failures="'; print: suiteFailures; nextPutAll:'" errors="'; print: suiteErrors; nextPutAll: '" time="'; print: suiteTime / 1000.0; nextPutAll: '">'.  stream close! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JenkinsSeedTestReport class  instanceVariableNames: ''!!JenkinsSeedTestReport class methodsFor: 'running' stamp: 'lr 5/14/2010 09:16'!runClasses: aCollectionOfClasses named: aString  | suite classes |  suite := TestSuite named: aString.  classes := (aCollectionOfClasses    select: [ :each | (each includesBehavior: TestCase) and: [ each isAbstract not ] ])      asSortedCollection: [ :a :b | a name <= b name ].  classes isEmpty    ifTrue: [ ^ self ].  classes    do: [ :each | each addToSuiteFromSelectors: suite ].  ^ self runSuite: suite! !!JenkinsSeedTestReport class methodsFor: 'running' stamp: 'lr 5/14/2010 09:16'!runSuite: aTestSuite  ^ self new     initializeOn: aTestSuite;     run! !BasicCodeLoader subclass: #RunJenkinsTestsCommandLineHandler  instanceVariableNames: ''  classVariableNames: ''  poolDictionaries: ''  category: 'RunJenkinsTestCommandLineHandler'!!RunJenkinsTestsCommandLineHandler methodsFor: 'activation' stamp: 'PavelKrivanek 6/28/2012 12:38'!activate  [    self runAll.  ] on: Error do: [ :err |     Transcript show: err messageText.    self handleError: err  ].  self quit.! !!RunJenkinsTestsCommandLineHandler methodsFor: 'commands' stamp: 'PavelKrivanek 6/28/2012 12:59'!runAll  JenkinsSeedTestReport runCategories: Smalltalk organization categories  ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RunJenkinsTestsCommandLineHandler class  instanceVariableNames: ''!!RunJenkinsTestsCommandLineHandler class methodsFor: 'accessing' stamp: 'PavelKrivanek 6/28/2012 12:38'!commandName  ^ 'tests'! !!RunJenkinsTestsCommandLineHandler class methodsFor: 'accessing' stamp: 'PavelKrivanek 6/28/2012 12:40'!description  ^ 'run test cases in the image with Jenkins reports'! !!RunJenkinsTestsCommandLineHandler class methodsFor: 'handler selection' stamp: 'PavelKrivanek 6/28/2012 12:38'!isResponsibleFor: commandLineArguments  "directly handle top-level -e and --evaluate options"  commandLineArguments withFirstArgument: [ :arg|     (#('-t' '--test') includes: arg)      ifTrue: [ ^ true ]].      ^ false! !'From Pharo2.0a of ''18 April 2012'' [Latest update: #20167] on 28 June 2012 at 1:26:52 pm'!!HzFuelExporter methodsFor: 'exporting-jenkins' stamp: 'PavelKrivanek 6/28/2012 13:17'!exportJenkinsSeedBuildTools  | package |  self ensureExportsFolder.    package := (FLPackage withPackages: #( 'JenkinsSeedBuildTools' ))        mustInitialize: false;        yourself.          FLPackageStore new    storePackage: package    on: ('exports/jenkinsSeedBuildTools.fuel' asFileReference writeStream binary)! !!HzFuelExporter methodsFor: 'exporting-jenkins' stamp: 'PavelKrivanek 6/28/2012 13:19'!exportJenkinsTestRunner  | package |  self ensureExportsFolder.    package := (FLPackage withPackages: #( 'RunJenkinsTestCommandLineHandler' ))        mustInitialize: false;        yourself.          FLPackageStore new    storePackage: package    on: ('exports/jenkinstestrunner.fuel' asFileReference writeStream binary)! !!HzFuelExporter new exportJenkinsSeedBuildTools .HzFuelExporter new exportJenkinsTestRunner.